# ChatwootAI - Sistema Inteligente de Atendimento Multi-Domínio e Omni Channel

![Versão](https://img.shields.io/badge/versão-4.0-blue)
![Status](https://img.shields.io/badge/status-em%20desenvolvimento-yellow)

## Visão Geral

O ChatwootAI é um sistema avançado de atendimento ao cliente que integra o Chatwoot como hub central de mensagens com uma arquitetura baseada em CrewAI. O sistema é projetado para ser multi-tenant, adaptando-se dinamicamente a diferentes domínios de negócio (cosméticos, saúde, varejo, etc.) através de configurações YAML.

## Arquitetura do Sistema

A arquitetura do ChatwootAI foi simplificada para um modelo mais direto e eficiente, onde cada domínio de negócio possui uma única crew especializada com todos os agentes necessários. Esta arquitetura é modular e extensível, com componentes claramente separados e responsabilidades bem definidas:

### Componentes Principais

1. **Hub Central (`src/core/hub.py`)**
   - `HubCrew`: Orquestração simplificada focada apenas em identificar o account_id e redirecionar mensagens
   - `DataProxyAgent`: Único ponto de acesso a dados (componente crítico)

2. **Crews por Domínio (definidas em YAML)**
   - Cada domínio de negócio possui uma única crew especializada
   - A crew contém todos os agentes necessários para o domínio específico
   - Após a identificação do domínio, a crew correspondente é acionada diretamente
   
   > **Importante**: Todas as crews, agentes e tarefas são definidos exclusivamente em arquivos YAML, não mais no código-fonte. O HubCrew apenas referencia essas definições para acionar a crew apropriada com base no domínio identificado.

3. **Camada de Dados**
   - `DataServiceHub`: Coordenação central de serviços de dados
   - `DataProxyAgent`: Interface unificada para acesso a dados
   - `MCP-Odoo`: Servidor MCP para conexão direta com o Odoo
   - `VectorSearchService`: Busca semântica em bases de conhecimento

4. **Gerenciamento de Domínios**
   - `DomainManager`: Carregamento e gestão de configurações YAML
   - Configurações específicas por domínio (cosméticos, saúde, varejo)
   - Adaptação dinâmica de comportamentos e respostas
   - Armazenamento de credenciais do Odoo por domínio

5. **Sistema de Plugins**
   - `PluginManager`: Carregamento e gestão de plugins
   - Extensão de funcionalidades sem modificar o código principal

### Nova Arquitetura Simplificada

O ChatwootAI implementa uma arquitetura extremamente simplificada, onde:

- **Foco no Account_ID**: O account_id é o identificador principal, com o domínio sendo apenas uma organização de pastas
- **Hub Simplificado**: O hub.py foi reduzido de ~1450 para ~300 linhas, focando apenas em identificar o account_id e redirecionar mensagens
- **Crew Única por Account_ID**: Cada account_id possui uma única crew especializada com todos os agentes necessários
- **Conexão Direta com Odoo**: O sistema se conecta diretamente ao banco de dados Odoo via MCP (Message Control Program)
- **Configuração Centralizada**: Credenciais e configurações do Odoo são armazenadas no arquivo YAML do account_id

Esta arquitetura oferece várias vantagens:

1. **Simplificação do Fluxo**: Elimina a complexidade de gerenciar múltiplas crews e o roteamento entre elas
2. **Redução de Overhead**: Menos comunicação entre componentes diferentes
3. **Manutenção Mais Fácil**: Cada domínio é autocontido com sua própria crew
4. **Dados Reais**: Conexão direta com o Odoo proporciona acesso a dados reais em vez de simulados
5. **Configuração Flexível**: Manter as credenciais no YAML facilita a configuração para múltiplos clientes

### Arquitetura Multi-Tenant Simplificada

O ChatwootAI implementa uma arquitetura multi-tenant que prioriza o account_id como identificador principal, com o domínio sendo apenas uma organização de pastas. A implementação utiliza a `GenericCrew` como base para todas as crews, eliminando a necessidade de classes específicas para cada domínio ou account_id:

#### Implementação da GenericCrew

A `GenericCrew` é uma classe base que permite a criação dinâmica de crews a partir de configurações YAML:

1. **Definição Dinâmica**:
   - Todas as crews são instâncias da classe `GenericCrew`
   - As características específicas (nome, agentes, tarefas) são definidas em YAML
   - Não há necessidade de criar novas classes para novos domínios ou tipos de crew

2. **CrewFactory**:
   - O `CrewFactory` é responsável por instanciar crews a partir de configurações YAML
   - Ele recebe um ID de crew (ex: "sales_crew") e um nome de domínio (ex: "cosmetics")
   - Carrega a configuração apropriada via `DomainManager` e cria uma instância de `GenericCrew`

3. **Estrutura das Configurações YAML**:
   - Cada account_id possui seu próprio arquivo YAML (ex: `account_2.yaml`) com todas as configurações necessárias
   - A crew é definida com nome, descrição, agentes e tarefas
   - As tarefas especificam qual agente executa cada etapa e qual o resultado esperado
   - Credenciais do Odoo são armazenadas na seção de integração do arquivo YAML
   - O domínio é apenas uma organização de pastas, sem importância funcional significativa

#### Fluxo de Identificação de Account_ID e Redirecionamento

1. **Recebimento do Webhook**:
   - Quando um webhook é recebido do Chatwoot, o `ChatwootWebhookHandler` extrai informações críticas
   - São extraídos: account_id, inbox_id, conversation_id e customer_id

2. **Identificação do Account_ID**:
   - O account_id é o identificador principal para determinar qual configuração usar
   - O domínio é apenas uma organização de pastas, sem importância funcional significativa
   - Utiliza o arquivo `config/chatwoot_mapping.yaml` para mapear account_id → domínio/account_id

3. **Processamento pelo Hub Simplificado**:
   - O novo hub.py foi reduzido de ~1450 para ~300 linhas
   - Foca apenas em identificar o account_id e redirecionar mensagens
   - Não utiliza mais agentes como ContextManagerAgent ou IntegrationAgent
   - Utiliza o sistema de memória integrado do CrewAI em vez de um sistema personalizado

4. **Carregamento da Configuração do Account_ID**:
   - O sistema carrega diretamente o arquivo YAML do account_id (ex: `@config/furniture/account_2.yaml`)
   - Não há mais dependência de arquivos como `domain.yaml` ou `config.yaml`
   - Todas as configurações necessárias estão no arquivo do account_id

5. **Criação da Crew do Account_ID**:
   - Uma única crew é criada para o account_id identificado
   - O `HubCrew` utiliza o `CrewFactory` para instanciar a crew
   - Exemplo: `crew_factory.get_crew_for_domain("domain_crew", domain_name, account_id)` cria a crew
   - A crew é armazenada em cache para evitar recriação desnecessária

### Tecnologias Utilizadas

- **Chatwoot**: Hub central de mensagens e interface com clientes
- **CrewAI**: Framework para orquestração de agentes inteligentes
- **Qdrant**: Banco de dados vetorial para busca semântica
- **Redis**: Cache distribuído e gerenciamento de estado
- **Odoo**: Sistema ERP para regras de negócio e dados (conexão direta via MCP)
- **MCP-Odoo**: Servidor MCP para conexão com o Odoo

## Fluxo de Processamento de Mensagens

O ChatwootAI implementa um fluxo extremamente simplificado de processamento de mensagens, com foco na identificação do account_id e redirecionamento direto para a crew apropriada:

### 1. Entrada da Mensagem e Identificação do Account_ID
- Cliente envia mensagem pelo WhatsApp ou outro canal
- Chatwoot recebe a mensagem e a encaminha via webhook para o sistema
- O `ChatwootWebhookHandler` processa a requisição e extrai informações críticas:
  - account_id (identificador principal)
  - conversation_id e customer_id (para identificação)
- O account_id é usado para determinar qual configuração usar:
  1. Mapeamento de account_id para domínio/account_id (via arquivo `chatwoot_mapping.yaml`)
  2. Account_id fallback (configurado via variável de ambiente `DEFAULT_ACCOUNT_ID`)

### 2. Processamento pelo Hub Simplificado
- A mensagem é encaminhada para o `HubCrew` simplificado
- O `HubCrew` carrega diretamente o arquivo YAML do account_id
- Não há mais dependência de arquivos como `domain.yaml` ou `config.yaml`
- O sistema de memória integrado do CrewAI é usado em vez de um ContextManagerAgent

### 3. Acionamento da Crew do Account_ID
- Uma única crew é criada para o account_id identificado
- A crew é armazenada em cache para evitar recriação desnecessária
- Cada agente tem acesso apenas às ferramentas definidas na configuração YAML
- A crew processa a mensagem de acordo com sua configuração específica

### 4. Acesso a Dados via DataProxyAgent e MCP-Odoo
- Os agentes NUNCA acessam dados diretamente
- Todas as consultas são feitas exclusivamente através do `DataProxyAgent`
- O `DataProxyAgent` adapta as consultas ao domínio ativo
- O `DataProxyAgent` utiliza as credenciais do Odoo armazenadas no arquivo YAML do domínio
- As consultas são enviadas para o servidor MCP-Odoo, que se conecta diretamente ao banco de dados Odoo
- O MCP-Odoo processa as consultas e retorna os resultados para o `DataProxyAgent`

### 5. Processamento e Geração de Resposta
- A crew do domínio processa os dados recebidos
- Uma resposta personalizada é gerada considerando:
  - O domínio ativo (ex: linguagem específica para cosméticos)
  - O histórico da conversa
  - As regras de negócio aplicáveis
  - As preferências do cliente

### 6. Retorno da Resposta
- A resposta é enviada de volta ao `HubCrew`
- O `HubCrew` a encaminha para o Chatwoot
- O Chatwoot entrega a resposta ao cliente via canal original

## Exemplo de Fluxo de Conversa

### Cenário: Cliente pergunta sobre produto em uma loja de móveis (account_id 2)

1. **Cliente envia mensagem pelo WhatsApp**: "Vocês têm sofás de couro?"

2. **Fluxo de Processamento**:
   - Chatwoot recebe a mensagem e envia para o webhook
   - `ChatwootWebhookHandler` identifica o account_id "2" e determina que pertence ao domínio "furniture"
   - O sistema carrega diretamente o arquivo `@config/furniture/account_2.yaml`
   - `HubCrew` simplificado aciona a crew para o account_id "2"
   - O sistema de memória integrado do CrewAI registra a consulta no histórico

3. **Processamento pela Crew do Account_ID**:
   - `SalesAgent` (definido em YAML) formula consulta estruturada
   - `SalesAgent` solicita dados ao `DataProxyAgent`
   - `DataProxyAgent` adapta a consulta ao account_id "2"
   - `DataProxyAgent` utiliza as credenciais do Odoo do arquivo YAML do account_id
   - `DataProxyAgent` envia a consulta para o servidor MCP-Odoo
   - MCP-Odoo processa a consulta e retorna os resultados
   - Resultados são filtrados e formatados pelo `DataProxyAgent`
   - Dados são retornados ao `SalesAgent`

4. **Geração de Resposta**:
   - `SalesAgent` analisa os dados recebidos
   - Gera resposta personalizada: "Sim, temos vários modelos de sofás de couro! Nosso mais vendido é o Sofá Milano em couro legítimo, disponível em preto, marrom e bege. Também temos o modelo Barcelona, mais compacto e ideal para salas menores. Posso enviar fotos e informações de preço se desejar."

5. **Retorno ao Cliente**:
   - Resposta volta para o `HubCrew` simplificado
   - `HubCrew` encaminha para o Chatwoot
   - Chatwoot entrega a mensagem ao cliente via WhatsApp

## Princípios Arquiteturais

1. **Foco no Account_ID**: O account_id é o identificador principal, com o domínio sendo apenas uma organização de pastas
2. **Simplificação Extrema**: Hub.py reduzido de ~1450 para ~300 linhas, focando apenas em identificar o account_id e redirecionar mensagens
3. **Centralização do acesso a dados**: Todo acesso a dados passa obrigatoriamente pelo `DataProxyAgent`
4. **Conexão direta com Odoo**: Utilização do MCP-Odoo para acesso direto ao banco de dados Odoo
5. **Configuração por Account_ID**: Cada account_id possui seu próprio arquivo YAML com todas as configurações necessárias
6. **Desacoplamento de componentes**: Interfaces claras entre módulos para facilitar manutenção
7. **Uso de recursos nativos do CrewAI**: Sistema de memória integrado em vez de um sistema personalizado

## Configuração e Personalização

### Configuração por Account_ID

O sistema é altamente configurável através de arquivos YAML organizados por domínio e account_id:

```
/config
  /furniture         # Domínio (apenas uma organização de pastas)
    account_1.yaml   # Configuração completa para o account_id 1
    account_2.yaml   # Configuração completa para o account_id 2
  /cosmetics         # Outro domínio (apenas uma organização de pastas)
    account_3.yaml   # Configuração completa para o account_id 3
    account_4.yaml   # Configuração completa para o account_id 4
```

Cada arquivo de account_id contém todas as configurações necessárias:
- Definição completa da crew e seus agentes
- Ferramentas disponíveis para cada agente
- Fluxos de trabalho e etapas de processamento
- Regras de negócio específicas
- Credenciais de acesso ao Odoo

O domínio é apenas uma organização de pastas, sem importância funcional significativa.

### Configuração do MCP-Odoo

O sistema utiliza o MCP-Odoo para se conectar diretamente ao banco de dados Odoo. As credenciais são armazenadas no arquivo YAML do account_id:

```yaml
# Exemplo de configuração de integração com Odoo no arquivo account_2.yaml
integrations:
  odoo:
    host: "db"
    port: 5432
    user: "odoo"
    password: "odoo"
    database: "furniture_db"
    product_categories:
      - sofás
      - mesas
      - cadeiras
    price_lists:
      - varejo
      - atacado
```

### Mapeamento de Account_ID para Domínios

O sistema utiliza um arquivo de configuração YAML (`config/chatwoot_mapping.yaml`) para mapear account_ids do Chatwoot para domínios:

```yaml
accounts:
  "1": "furniture"  # Account ID 1 usa o domínio furniture (pasta)
  "2": "furniture"  # Account ID 2 usa o domínio furniture (pasta)
  "3": "cosmetics"  # Account ID 3 usa o domínio cosmetics (pasta)
  "4": "cosmetics"  # Account ID 4 usa o domínio cosmetics (pasta)
```

O domínio é apenas uma organização de pastas, sem importância funcional significativa. O sistema carrega diretamente o arquivo YAML do account_id (ex: `@config/furniture/account_2.yaml`).

### Mecanismo de Fallback

O sistema implementa um mecanismo de fallback para garantir que todas as mensagens sejam processadas, mesmo quando não é possível determinar o account_id específico:

1. **Account_ID Fallback**: Configurado via variável de ambiente `DEFAULT_ACCOUNT_ID` (padrão: "1")
2. **Domínio Fallback**: Configurado via variável de ambiente `DEFAULT_DOMAIN` (padrão: "furniture")
3. **Uso do Fallback**: O account_id fallback é usado apenas quando:
   - O account_id não está mapeado em `chatwoot_mapping.yaml`
   - Ocorre um erro ao carregar o mapeamento de clientes
   - O webhook não contém informações de account_id

## Estrutura de Configuração

O ChatwootAI utiliza uma estrutura de configuração simplificada baseada em YAML, focada no account_id como identificador principal:

### Mapeamento de Account_ID para Domínios

```
config/chatwoot_mapping.yaml
```

Este arquivo mapeia os account_ids do Chatwoot para domínios (pastas):

```yaml
accounts:
  "1": "furniture"  # Account ID 1 usa o domínio furniture (pasta)
  "2": "furniture"  # Account ID 2 usa o domínio furniture (pasta)
  "3": "cosmetics"  # Account ID 3 usa o domínio cosmetics (pasta)
  "4": "cosmetics"  # Account ID 4 usa o domínio cosmetics (pasta)
```

### Estrutura de Configuração por Account_ID

```
config/
```

A estrutura de diretórios segue o padrão:

```
config/
  ├── furniture/           # Domínio (apenas uma organização de pastas)
  │   ├── account_1.yaml    # Configuração completa para o account_id 1
  │   └── account_2.yaml    # Configuração completa para o account_id 2
  └── cosmetics/           # Outro domínio (apenas uma organização de pastas)
      ├── account_3.yaml    # Configuração completa para o account_id 3
      └── account_4.yaml    # Configuração completa para o account_id 4
```

Esta estrutura permite:
1. Configurações completas por account_id
2. Organização lógica por domínio (apenas para organização de pastas)
3. Independência entre configurações de diferentes account_ids

> **Nota Importante**: O domínio é apenas uma organização de pastas, sem importância funcional significativa. O sistema carrega diretamente o arquivo YAML do account_id (ex: `@config/furniture/account_2.yaml`).

## Testes e Validação

O sistema inclui testes automatizados para validar o funcionamento correto de todos os componentes:

1. **Testes Unitários**: Validam o funcionamento isolado de cada componente
2. **Testes de Integração**: Validam a interação entre componentes
3. **Testes End-to-End**: Simulam o fluxo completo do sistema, incluindo a identificação de account_id

### Testes de Identificação de Account_ID

Um aspecto crítico do sistema é a identificação correta do account_id do Chatwoot. O arquivo `tests/integration/end_to_end_test.py` contém testes que validam:

1. A identificação correta do account_id a partir do webhook do Chatwoot
2. O carregamento direto do arquivo YAML do account_id (ex: `@config/furniture/account_2.yaml`)
3. O processamento da mensagem pelo `HubCrew` simplificado
4. A consulta de dados via `DataProxyAgent` e MCP-Odoo
5. A geração e envio da resposta de volta ao cliente

Esses testes são fundamentais para garantir que o sistema identifique corretamente o account_id e processe as mensagens de acordo com as configurações específicas.

Para executar os testes:

```bash
# Testes unitários
python -m pytest tests/unit

# Testes de integração
python -m pytest tests/integration

# Testes end-to-end (fluxo completo com identificação de account_id)
python tests/integration/end_to_end_test.py
```

### Testes com NGROK

Para testar o fluxo completo com o Chatwoot real:

```bash
# Iniciar o servidor com NGROK conectado ao Chatwoot
python src/main.py --ngrok

# Monitorar logs em tempo real
python scripts/monitoring/log_monitor.py
```

Estas ferramentas ajudam a verificar se o sistema está identificando corretamente o account_id e processando as mensagens conforme esperado em um ambiente real.

## Próximos Passos

- Implementação da busca semântica com Qdrant para produtos do Odoo
- Integração do Redis para cache de credenciais, configurações e instâncias de CrewAI
- Implementação de busca híbrida (BM42) para combinar busca semântica e por palavras-chave
- Testes de integração com o MCP-Odoo e Qdrant
- Implementação de agendamento de compromissos via calendário do Odoo
- Otimização de performance para processamento em larga escala

## Contribuição

O projeto está em desenvolvimento ativo. Para contribuir:
1. Siga as convenções de código existentes
2. Documente todas as alterações
3. Mantenha a arquitetura modular e desacoplada
4. Teste exaustivamente antes de submeter alterações

---

Desenvolvido com ❤️ pela Equipe ChatwootAI
