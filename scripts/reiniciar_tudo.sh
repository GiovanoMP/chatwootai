#!/bin/bash

# Script unificado para reiniciar todos os servi√ßos e mostrar logs
# Uso: ./scripts/reiniciar_tudo.sh

# Cores para sa√≠da
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# Diret√≥rio base
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONFIG_SERVICE_DIR="${BASE_DIR}/config-service"
CONFIG_VIEWER_DIR="${BASE_DIR}/config-viewer"

# Criar diret√≥rios de logs se n√£o existirem
mkdir -p "${BASE_DIR}/logs"
mkdir -p "${CONFIG_SERVICE_DIR}/logs"

# Arquivos de log
SERVER_LOG="${BASE_DIR}/logs/server.log"
WEBHOOK_LOG="${BASE_DIR}/logs/webhook.log"
HUB_LOG="${BASE_DIR}/logs/hub.log"
ODOO_API_LOG="${BASE_DIR}/logs/odoo_api.log"
CONFIG_SERVICE_LOG="${CONFIG_SERVICE_DIR}/logs/config_service.log"
CONFIG_VIEWER_LOG="${CONFIG_SERVICE_DIR}/logs/config_viewer.log"

# Fun√ß√£o para exibir cabe√ßalho
show_header() {
    echo -e "\n${YELLOW}======================================================================${NC}"
    echo -e "${GREEN}$1${NC}"
    echo -e "${YELLOW}======================================================================${NC}"
}

# Fun√ß√£o para matar processos
kill_processes() {
    show_header "üöÄ REINICIANDO TODOS OS SERVI√áOS"

    echo -e "${BLUE}üîç Procurando processos do servidor principal...${NC}"
    SERVER_PIDS=$(pgrep -f "uvicorn main:app")
    if [[ -n "$SERVER_PIDS" ]]; then
        echo -e "${RED}üõë Matando processo do servidor principal (PID: ${SERVER_PIDS})...${NC}"
        kill -9 $SERVER_PIDS
        echo -e "${GREEN}‚úÖ Processo do servidor principal finalizado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum processo do servidor principal encontrado${NC}"
    fi

    echo -e "${BLUE}üîç Procurando processos do servi√ßo de configura√ß√£o...${NC}"
    CONFIG_SERVICE_PIDS=$(pgrep -f "python.*run.py")
    if [[ -n "$CONFIG_SERVICE_PIDS" ]]; then
        echo -e "${RED}üõë Matando processo do servi√ßo de configura√ß√£o (PID: ${CONFIG_SERVICE_PIDS})...${NC}"
        kill -9 $CONFIG_SERVICE_PIDS
        echo -e "${GREEN}‚úÖ Processo do servi√ßo de configura√ß√£o finalizado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum processo do servi√ßo de configura√ß√£o encontrado${NC}"
    fi

    echo -e "${BLUE}üîç Procurando processos do visualizador de configura√ß√µes...${NC}"
    CONFIG_VIEWER_PIDS=$(pgrep -f "python.*app.py")
    if [[ -n "$CONFIG_VIEWER_PIDS" ]]; then
        echo -e "${RED}üõë Matando processo do visualizador de configura√ß√µes (PID: ${CONFIG_VIEWER_PIDS})...${NC}"
        kill -9 $CONFIG_VIEWER_PIDS
        echo -e "${GREEN}‚úÖ Processo do visualizador de configura√ß√µes finalizado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum processo do visualizador de configura√ß√µes encontrado${NC}"
    fi
}

# Fun√ß√£o para iniciar o servi√ßo de configura√ß√£o
start_config_service() {
    show_header "üöÄ INICIANDO SERVI√áO DE CONFIGURA√á√ÉO"

    echo -e "${BLUE}üñ•Ô∏è Iniciando servi√ßo de configura√ß√£o...${NC}"
    cd "${CONFIG_SERVICE_DIR}" && python run.py > "${CONFIG_SERVICE_LOG}" 2>&1 &
    CONFIG_SERVICE_PID=$!
    echo -e "${GREEN}‚úÖ Servi√ßo de configura√ß√£o iniciado com PID: ${CONFIG_SERVICE_PID}${NC}"

    # Aguardar o servi√ßo iniciar
    echo -e "${YELLOW}‚è≥ Aguardando o servi√ßo de configura√ß√£o iniciar (10 segundos)...${NC}"

    # Verificar sa√∫de do servi√ßo com tentativas
    MAX_ATTEMPTS=10
    ATTEMPT=1
    SLEEP_TIME=1

    while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
        if kill -0 $CONFIG_SERVICE_PID 2>/dev/null; then
            # Verificar sa√∫de do servi√ßo
            HEALTH_CHECK=$(curl -s http://localhost:8002/health 2>/dev/null)
            if [[ "$HEALTH_CHECK" == *"healthy"* ]]; then
                echo -e "${GREEN}‚úÖ Servi√ßo de configura√ß√£o est√° saud√°vel!${NC}"
                return 0
            else
                echo -e "${YELLOW}‚è≥ Tentativa $ATTEMPT de $MAX_ATTEMPTS: Servi√ßo em execu√ß√£o, mas health check falhou. Tentando novamente em ${SLEEP_TIME}s...${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≥ Tentativa $ATTEMPT de $MAX_ATTEMPTS: Servi√ßo n√£o est√° em execu√ß√£o. Tentando novamente em ${SLEEP_TIME}s...${NC}"
        fi

        sleep $SLEEP_TIME
        ATTEMPT=$((ATTEMPT + 1))
    done

    echo -e "${RED}‚ö†Ô∏è Servi√ßo de configura√ß√£o pode n√£o ter iniciado corretamente ap√≥s $MAX_ATTEMPTS tentativas. Verifique os logs.${NC}"
    return 1
}

# Fun√ß√£o para iniciar o visualizador de configura√ß√µes
start_config_viewer() {
    show_header "üöÄ INICIANDO VISUALIZADOR DE CONFIGURA√á√ïES"

    echo -e "${BLUE}üñ•Ô∏è Iniciando visualizador de configura√ß√µes...${NC}"
    cd "${CONFIG_VIEWER_DIR}" && python app.py > "${CONFIG_VIEWER_LOG}" 2>&1 &
    CONFIG_VIEWER_PID=$!
    echo -e "${GREEN}‚úÖ Visualizador de configura√ß√µes iniciado com PID: ${CONFIG_VIEWER_PID}${NC}"

    # Aguardar o visualizador iniciar
    echo -e "${YELLOW}‚è≥ Aguardando o visualizador de configura√ß√µes iniciar (10 segundos)...${NC}"

    # Verificar sa√∫de do servi√ßo com tentativas
    MAX_ATTEMPTS=10
    ATTEMPT=1
    SLEEP_TIME=1

    while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
        if kill -0 $CONFIG_VIEWER_PID 2>/dev/null; then
            # Verificar sa√∫de do servi√ßo
            HEALTH_CHECK=$(curl -s http://localhost:8080/health 2>/dev/null)
            if [[ -n "$HEALTH_CHECK" ]]; then
                echo -e "${GREEN}‚úÖ Visualizador de configura√ß√µes iniciado com sucesso!${NC}"
                echo -e "${GREEN}‚úÖ Acesse o visualizador em: http://localhost:8080${NC}"
                return 0
            else
                echo -e "${YELLOW}‚è≥ Tentativa $ATTEMPT de $MAX_ATTEMPTS: Servi√ßo em execu√ß√£o, mas health check falhou. Tentando novamente em ${SLEEP_TIME}s...${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≥ Tentativa $ATTEMPT de $MAX_ATTEMPTS: Servi√ßo n√£o est√° em execu√ß√£o. Tentando novamente em ${SLEEP_TIME}s...${NC}"
        fi

        sleep $SLEEP_TIME
        ATTEMPT=$((ATTEMPT + 1))
    done

    echo -e "${RED}‚ö†Ô∏è Visualizador de configura√ß√µes pode n√£o ter iniciado corretamente ap√≥s $MAX_ATTEMPTS tentativas. Verifique os logs.${NC}"
    return 1
}

# Fun√ß√£o para iniciar o servidor principal
start_server() {
    show_header "üöÄ INICIANDO SERVIDOR PRINCIPAL"

    echo -e "${BLUE}üñ•Ô∏è Iniciando servidor principal...${NC}"
    cd "${BASE_DIR}" && python -m uvicorn main:app --host 0.0.0.0 --port 8001 > "${SERVER_LOG}" 2>&1 &
    SERVER_PID=$!
    echo -e "${GREEN}‚úÖ Servidor principal iniciado com PID: ${SERVER_PID}${NC}"

    # Aguardar o servidor iniciar
    echo -e "${YELLOW}‚è≥ Aguardando o servidor principal iniciar (10 segundos)...${NC}"

    # Verificar sa√∫de do servi√ßo com tentativas
    MAX_ATTEMPTS=10
    ATTEMPT=1
    SLEEP_TIME=1

    while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
        if kill -0 $SERVER_PID 2>/dev/null; then
            # Verificar se o servidor est√° respondendo
            SERVER_CHECK=$(curl -s http://localhost:8001 2>/dev/null)
            if [[ -n "$SERVER_CHECK" ]]; then
                echo -e "${GREEN}‚úÖ Servidor principal iniciado com sucesso!${NC}"
                return 0
            else
                echo -e "${YELLOW}‚è≥ Tentativa $ATTEMPT de $MAX_ATTEMPTS: Servidor em execu√ß√£o, mas n√£o est√° respondendo. Tentando novamente em ${SLEEP_TIME}s...${NC}"
            fi
        else
            echo -e "${YELLOW}‚è≥ Tentativa $ATTEMPT de $MAX_ATTEMPTS: Servidor n√£o est√° em execu√ß√£o. Tentando novamente em ${SLEEP_TIME}s...${NC}"
        fi

        sleep $SLEEP_TIME
        ATTEMPT=$((ATTEMPT + 1))
    done

    echo -e "${RED}‚ö†Ô∏è Servidor principal pode n√£o ter iniciado corretamente ap√≥s $MAX_ATTEMPTS tentativas. Verifique os logs.${NC}"
    return 1
}

# Fun√ß√£o para monitorar logs
monitor_logs() {
    show_header "üîç MONITOR DE LOGS UNIFICADO"

    echo -e "${GREEN}‚úÖ Monitorando log do servidor: ${SERVER_LOG}${NC}"
    echo -e "${GREEN}‚úÖ Monitorando log do webhook: ${WEBHOOK_LOG}${NC}"
    echo -e "${GREEN}‚úÖ Monitorando log do hub: ${HUB_LOG}${NC}"
    echo -e "${GREEN}‚úÖ Monitorando log da API Odoo: ${ODOO_API_LOG}${NC}"
    echo -e "${CYAN}‚úÖ Monitorando log do servi√ßo de configura√ß√£o: ${CONFIG_SERVICE_LOG}${NC}"
    echo -e "${PURPLE}‚úÖ Monitorando log do visualizador de configura√ß√µes: ${CONFIG_VIEWER_LOG}${NC}"

    show_header "üìä LOGS EM TEMPO REAL (Ctrl+C para sair)"

    # Usar o script de monitoramento de logs simples
    "${BASE_DIR}/scripts/logs_simples.sh"
}

# Fun√ß√£o para mostrar informa√ß√µes de acesso
show_access_info() {
    show_header "üìä INFORMA√á√ïES DE ACESSO"

    echo -e "${GREEN}‚úÖ Servidor principal: http://localhost:8001${NC}"
    echo -e "${GREEN}‚úÖ Servi√ßo de configura√ß√£o: http://localhost:8002${NC}"
    echo -e "${GREEN}‚úÖ Documenta√ß√£o da API: http://localhost:8002/docs${NC}"
    echo -e "${GREEN}‚úÖ Visualizador de configura√ß√µes: http://localhost:8080${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Usu√°rio: admin${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Senha: Config@Viewer2025!${NC}"
}

# Executar fun√ß√µes
kill_processes
start_config_service
start_config_viewer
start_server
show_access_info
monitor_logs
