Guia Definitivo: Integra√ß√£o CrewAI com MCP (Model Context Protocol)
üìã Vis√£o Geral
Este guia fornece instru√ß√µes passo a passo para integrar seus servidores MCP (MongoDB e Redis) com agentes CrewAI usando a solu√ß√£o oficial crewai-tools.
üõ†Ô∏è Instala√ß√£o
1. Instalar CrewAI com Suporte MCP
# Instala√ß√£o b√°sica do CrewAI
pip install crewai

# Instala√ß√£o do crewai-tools com suporte MCP
pip install crewai-tools[mcp]

# OU usando uv (recomendado)
uv add crewai-tools --extra mcp

2. Verificar Instala√ß√£o
# Teste b√°sico para verificar se a instala√ß√£o funcionou
try:
    from crewai_tools import MCPServerAdapter
    from crewai import Agent, Task, Crew
    print("‚úÖ Instala√ß√£o bem-sucedida!")
except ImportError as e:
    print(f"‚ùå Erro na instala√ß√£o: {e}")

üèóÔ∏è Estrutura Base da Solu√ß√£o
1. Imports Necess√°rios
import os
from crewai_tools import MCPServerAdapter
from crewai import Agent, Task, Crew
from mcp import StdioServerParameters  # Para MCP STDIO

2. Configura√ß√£o de Conex√£o MCP
Para MCP Redis (SSE - Server-Sent Events)
# Configura√ß√£o para MCP Redis via SSE
redis_server_params = {
    "url": "http://localhost:3001/sse"  # Substitua pela URL do seu MCP Redis
}

Para MCP MongoDB (HTTP ou STDIO)
# Se seu MCP MongoDB usa HTTP
mongodb_server_params = {
    "url": "http://localhost:3002"  # Substitua pela URL do seu MCP MongoDB
}

# Se seu MCP MongoDB usa STDIO
mongodb_stdio_params = StdioServerParameters(
    command="seu-comando-mongodb",  # Comando para iniciar o MCP MongoDB
    args=["--port", "3002"],        # Argumentos do comando
    env={**os.environ}              # Vari√°veis de ambiente
)

üîß Implementa√ß√£o Pr√°tica
M√©todo 1: Context Manager (Recomendado)
from crewai_tools import MCPServerAdapter
from crewai import Agent, Task, Crew

def create_crew_with_mcp():
    # Configura√ß√£o dos servidores MCP
    redis_params = {"url": "http://localhost:3001/sse"}
    mongodb_params = {"url": "http://localhost:3002"}
    
    # Usar context manager para gest√£o autom√°tica de conex√µes
    with MCPServerAdapter(redis_params) as redis_tools:
        with MCPServerAdapter(mongodb_params) as mongodb_tools:
            
            # Combinar ferramentas de ambos os MCPs
            all_tools = redis_tools + mongodb_tools
            
            # Criar agente com todas as ferramentas MCP
            data_agent = Agent(
                role="Analista de Dados",
                goal="Analisar e manipular dados do Redis e MongoDB",
                backstory="Especialista em an√°lise de dados com acesso a m√∫ltiplas fontes",
                tools=all_tools,
                verbose=True
            )
            
            # Criar tarefa
            analysis_task = Task(
                description="Recuperar dados do Redis, consultar MongoDB e gerar relat√≥rio",
                agent=data_agent,
                expected_output="Relat√≥rio detalhado dos dados analisados"
            )
            
            # Criar e executar crew
            crew = Crew(
                agents=[data_agent],
                tasks=[analysis_task],
                verbose=True
            )
            
            return crew.kickoff()

# Executar
result = create_crew_with_mcp()
print(result)

M√©todo 2: Controle Manual de Conex√µes
from crewai_tools import MCPServerAdapter
from crewai import Agent, Task, Crew

def create_crew_manual_mcp():
    # Inicializar adaptadores MCP
    redis_adapter = None
    mongodb_adapter = None
    
    try:
        # Conectar aos servidores MCP
        redis_adapter = MCPServerAdapter({"url": "http://localhost:3001/sse"})
        mongodb_adapter = MCPServerAdapter({"url": "http://localhost:3002"})
        
        # Obter ferramentas
        redis_tools = redis_adapter.tools
        mongodb_tools = mongodb_adapter.tools
        all_tools = redis_tools + mongodb_tools
        
        # Criar agente
        agent = Agent(
            role="Database Manager",
            goal="Gerenciar dados em Redis e MongoDB",
            backstory="Administrador experiente de bancos de dados",
            tools=all_tools
        )
        
        # Criar tarefa
        task = Task(
            description="Executar opera√ß√µes de CRUD nos bancos de dados",
            agent=agent,
            expected_output="Confirma√ß√£o das opera√ß√µes realizadas"
        )
        
        # Executar crew
        crew = Crew(agents=[agent], tasks=[task])
        result = crew.kickoff()
        
        return result
        
    finally:
        # IMPORTANTE: Sempre fechar conex√µes manualmente
        if redis_adapter:
            redis_adapter.stop()
        if mongodb_adapter:
            mongodb_adapter.stop()

# Executar
result = create_crew_manual_mcp()
print(result)

üéØ Configura√ß√µes Espec√≠ficas por Protocolo
1. Para MCP Redis (SSE)
# Configura√ß√£o SSE para Redis
redis_config = {
    "url": "http://localhost:3001/sse",
    "timeout": 30,  # Timeout em segundos
    "headers": {    # Headers personalizados se necess√°rio
        "Authorization": "Bearer seu-token"
    }
}

with MCPServerAdapter(redis_config) as tools:
    # Usar ferramentas Redis
    pass

2. Para MCP MongoDB (STDIO)
from mcp import StdioServerParameters

# Configura√ß√£o STDIO para MongoDB
mongodb_stdio = StdioServerParameters(
    command="python",
    args=["-m", "seu_mcp_mongodb"],
    env={
        "MONGODB_URI": "mongodb://localhost:27017",
        "DATABASE_NAME": "seu_database",
        **os.environ
    }
)

with MCPServerAdapter(mongodb_stdio) as tools:
    # Usar ferramentas MongoDB
    pass

üîç Diagn√≥stico e Debug
1. Verificar Conex√£o com MCPs
def test_mcp_connection():
    try:
        # Testar Redis MCP
        redis_params = {"url": "http://localhost:3001/sse"}
        with MCPServerAdapter(redis_params) as redis_tools:
            print(f"‚úÖ Redis MCP: {len(redis_tools)} ferramentas dispon√≠veis")
            for tool in redis_tools:
                print(f"  - {tool.name}: {tool.description}")
    
    except Exception as e:
        print(f"‚ùå Erro Redis MCP: {e}")
    
    try:
        # Testar MongoDB MCP
        mongodb_params = {"url": "http://localhost:3002"}
        with MCPServerAdapter(mongodb_params) as mongodb_tools:
            print(f"‚úÖ MongoDB MCP: {len(mongodb_tools)} ferramentas dispon√≠veis")
            for tool in mongodb_tools:
                print(f"  - {tool.name}: {tool.description}")
                
    except Exception as e:
        print(f"‚ùå Erro MongoDB MCP: {e}")

# Executar diagn√≥stico
test_mcp_connection()

2. Debug de Ferramentas
def debug_mcp_tools():
    with MCPServerAdapter({"url": "http://localhost:3001/sse"}) as tools:
        for tool in tools:
            print(f"Nome: {tool.name}")
            print(f"Descri√ß√£o: {tool.description}")
            print(f"Argumentos: {getattr(tool, 'args_schema', 'N/A')}")
            print("-" * 50)

debug_mcp_tools()

üõ°Ô∏è Tratamento de Erros
Implementa√ß√£o Robusta com Try-Catch
def robust_mcp_crew():
    adapters = []
    
    try:
        # Lista de configura√ß√µes MCP
        mcp_configs = [
            {"name": "redis", "config": {"url": "http://localhost:3001/sse"}},
            {"name": "mongodb", "config": {"url": "http://localhost:3002"}},
        ]
        
        all_tools = []
        
        # Conectar a cada MCP com tratamento de erro individual
        for mcp_config in mcp_configs:
            try:
                adapter = MCPServerAdapter(mcp_config["config"])
                adapters.append(adapter)
                tools = adapter.tools
                all_tools.extend(tools)
                print(f"‚úÖ {mcp_config['name']}: {len(tools)} ferramentas carregadas")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao conectar {mcp_config['name']}: {e}")
                continue
        
        if not all_tools:
            raise Exception("Nenhuma ferramenta MCP dispon√≠vel")
        
        # Criar e executar crew com ferramentas dispon√≠veis
        agent = Agent(
            role="Data Processor",
            goal="Processar dados com ferramentas dispon√≠veis",
            backstory="Adapt√°vel a diferentes fontes de dados",
            tools=all_tools
        )
        
        task = Task(
            description="Executar opera√ß√µes com ferramentas dispon√≠veis",
            agent=agent,
            expected_output="Resultado das opera√ß√µes"
        )
        
        crew = Crew(agents=[agent], tasks=[task])
        return crew.kickoff()
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        return None
        
    finally:
        # Limpar todas as conex√µes
        for adapter in adapters:
            try:
                adapter.stop()
            except:
                pass

# Executar vers√£o robusta
result = robust_mcp_crew()

üìö Exemplo Completo Multi-Tenant
Implementa√ß√£o com Suporte Multi-Tenant
class MCPCrewManager:
    def __init__(self, tenant_id):
        self.tenant_id = tenant_id
        self.adapters = []
    
    def get_mcp_configs(self):
        """Retorna configura√ß√µes MCP espec√≠ficas do tenant"""
        return [
            {
                "name": "redis",
                "config": {
                    "url": f"http://localhost:3001/sse?tenant={self.tenant_id}"
                }
            },
            {
                "name": "mongodb", 
                "config": {
                    "url": f"http://localhost:3002?tenant={self.tenant_id}"
                }
            }
        ]
    
    def create_crew(self, agent_config, task_description):
        try:
            all_tools = []
            
            # Conectar aos MCPs
            for mcp_config in self.get_mcp_configs():
                try:
                    adapter = MCPServerAdapter(mcp_config["config"])
                    self.adapters.append(adapter)
                    tools = adapter.tools
                    all_tools.extend(tools)
                    
                except Exception as e:
                    print(f"Erro MCP {mcp_config['name']}: {e}")
            
            # Criar agente com contexto do tenant
            agent = Agent(
                role=agent_config.get("role", "Data Agent"),
                goal=f"[Tenant {self.tenant_id}] {agent_config.get('goal', 'Process data')}",
                backstory=agent_config.get("backstory", "Tenant-specific agent"),
                tools=all_tools
            )
            
            # Criar tarefa
            task = Task(
                description=f"[Tenant {self.tenant_id}] {task_description}",
                agent=agent,
                expected_output="Tenant-specific results"
            )
            
            # Executar crew
            crew = Crew(agents=[agent], tasks=[task])
            return crew.kickoff()
            
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Limpar todas as conex√µes"""
        for adapter in self.adapters:
            try:
                adapter.stop()
            except:
                pass
        self.adapters.clear()

# Uso multi-tenant
def run_tenant_crew(tenant_id):
    manager = MCPCrewManager(tenant_id)
    
    agent_config = {
        "role": "Analista de Dados",
        "goal": "Analisar dados espec√≠ficos do tenant",
        "backstory": "Especialista em an√°lise de dados corporativos"
    }
    
    task_description = "Recuperar m√©tricas e gerar relat√≥rio anal√≠tico"
    
    return manager.create_crew(agent_config, task_description)

# Executar para tenant espec√≠fico
result = run_tenant_crew("account_1")
print(result)

‚ö° Otimiza√ß√µes e Melhores Pr√°ticas
1. Pool de Conex√µes
class MCPConnectionPool:
    def __init__(self):
        self.connections = {}
    
    def get_connection(self, name, config):
        if name not in self.connections:
            self.connections[name] = MCPServerAdapter(config)
        return self.connections[name]
    
    def close_all(self):
        for adapter in self.connections.values():
            adapter.stop()
        self.connections.clear()

# Uso do pool
pool = MCPConnectionPool()
redis_adapter = pool.get_connection("redis", {"url": "http://localhost:3001/sse"})
mongodb_adapter = pool.get_connection("mongodb", {"url": "http://localhost:3002"})

2. Cache de Ferramentas
import functools
import time

@functools.lru_cache(maxsize=128)
def get_cached_tools(mcp_url, cache_time=300):
    """Cache ferramentas MCP por 5 minutos"""
    with MCPServerAdapter({"url": mcp_url}) as tools:
        return [(tool.name, tool.description) for tool in tools]

# Uso do cache
tools_info = get_cached_tools("http://localhost:3001/sse")

üêõ Troubleshooting
Problemas Comuns e Solu√ß√µes
Erro de Conex√£o MCP

 # Verificar se o servidor MCP est√° rodando
import requests
try:
    response = requests.get("http://localhost:3001/health", timeout=5)
    print(f"MCP Status: {response.status_code}")
except:
    print("‚ùå MCP n√£o est√° acess√≠vel")


Timeout de Conex√£o

 # Aumentar timeout
config = {
    "url": "http://localhost:3001/sse",
    "timeout": 60  # 60 segundos
}


Ferramentas N√£o Carregadas

 # Debug de ferramentas
with MCPServerAdapter(config) as tools:
    if not tools:
        print("‚ùå Nenhuma ferramenta encontrada")
    else:
        print(f"‚úÖ {len(tools)} ferramentas carregadas")


üöÄ Pr√≥ximos Passos
Testar Configura√ß√£o B√°sica: Execute o exemplo simples primeiro
Adaptar URLs: Substitua as URLs pelos endere√ßos reais dos seus MCPs
Implementar Multi-Tenant: Use os exemplos multi-tenant se necess√°rio
Monitorar Performance: Implemente logs e m√©tricas
Escalar Gradualmente: Adicione mais MCPs conforme necess√°rio
üìù Checklist de Implementa√ß√£o
[ ] Instalar crewai-tools[mcp]
[ ] Verificar conex√£o com MCP Redis (SSE)
[ ] Verificar conex√£o com MCP MongoDB
[ ] Testar carregamento de ferramentas
[ ] Implementar exemplo b√°sico
[ ] Adicionar tratamento de erros
[ ] Implementar suporte multi-tenant
[ ] Adicionar logs e monitoramento
[ ] Testar em ambiente de produ√ß√£o

Importante: Este guia assume que seus servidores MCP est√£o funcionando corretamente. Certifique-se de que eles est√£o acess√≠veis nas URLs especificadas antes de executar os exemplos.
Guia Definitivo: Integra√ß√£o CrewAI com MCP (Model Context Protocol)
üìã Vis√£o Geral
Este guia fornece instru√ß√µes passo a passo para integrar seus servidores MCP (MongoDB e Redis) com agentes CrewAI usando a solu√ß√£o oficial crewai-tools.
üõ†Ô∏è Instala√ß√£o
1. Instalar CrewAI com Suporte MCP
# Instala√ß√£o b√°sica do CrewAI
pip install crewai

# Instala√ß√£o do crewai-tools com suporte MCP
pip install crewai-tools[mcp]

# OU usando uv (recomendado)
uv add crewai-tools --extra mcp

2. Verificar Instala√ß√£o
# Teste b√°sico para verificar se a instala√ß√£o funcionou
try:
    from crewai_tools import MCPServerAdapter
    from crewai import Agent, Task, Crew
    print("‚úÖ Instala√ß√£o bem-sucedida!")
except ImportError as e:
    print(f"‚ùå Erro na instala√ß√£o: {e}")

üèóÔ∏è Estrutura Base da Solu√ß√£o
1. Imports Necess√°rios
import os
from crewai_tools import MCPServerAdapter
from crewai import Agent, Task, Crew
from mcp import StdioServerParameters  # Para MCP STDIO

2. Configura√ß√£o de Conex√£o MCP
Para MCP Redis (SSE - Server-Sent Events)
# Configura√ß√£o para MCP Redis via SSE
redis_server_params = {
    "url": "http://localhost:3001/sse"  # Substitua pela URL do seu MCP Redis
}

Para MCP MongoDB (HTTP ou STDIO)
# Se seu MCP MongoDB usa HTTP
mongodb_server_params = {
    "url": "http://localhost:3002"  # Substitua pela URL do seu MCP MongoDB
}

# Se seu MCP MongoDB usa STDIO
mongodb_stdio_params = StdioServerParameters(
    command="seu-comando-mongodb",  # Comando para iniciar o MCP MongoDB
    args=["--port", "3002"],        # Argumentos do comando
    env={**os.environ}              # Vari√°veis de ambiente
)

üîß Implementa√ß√£o Pr√°tica
M√©todo 1: Context Manager (Recomendado)
from crewai_tools import MCPServerAdapter
from crewai import Agent, Task, Crew

def create_crew_with_mcp():
    # Configura√ß√£o dos servidores MCP
    redis_params = {"url": "http://localhost:3001/sse"}
    mongodb_params = {"url": "http://localhost:3002"}
    
    # Usar context manager para gest√£o autom√°tica de conex√µes
    with MCPServerAdapter(redis_params) as redis_tools:
        with MCPServerAdapter(mongodb_params) as mongodb_tools:
            
            # Combinar ferramentas de ambos os MCPs
            all_tools = redis_tools + mongodb_tools
            
            # Criar agente com todas as ferramentas MCP
            data_agent = Agent(
                role="Analista de Dados",
                goal="Analisar e manipular dados do Redis e MongoDB",
                backstory="Especialista em an√°lise de dados com acesso a m√∫ltiplas fontes",
                tools=all_tools,
                verbose=True
            )
            
            # Criar tarefa
            analysis_task = Task(
                description="Recuperar dados do Redis, consultar MongoDB e gerar relat√≥rio",
                agent=data_agent,
                expected_output="Relat√≥rio detalhado dos dados analisados"
            )
            
            # Criar e executar crew
            crew = Crew(
                agents=[data_agent],
                tasks=[analysis_task],
                verbose=True
            )
            
            return crew.kickoff()

# Executar
result = create_crew_with_mcp()
print(result)

M√©todo 2: Controle Manual de Conex√µes
from crewai_tools import MCPServerAdapter
from crewai import Agent, Task, Crew

def create_crew_manual_mcp():
    # Inicializar adaptadores MCP
    redis_adapter = None
    mongodb_adapter = None
    
    try:
        # Conectar aos servidores MCP
        redis_adapter = MCPServerAdapter({"url": "http://localhost:3001/sse"})
        mongodb_adapter = MCPServerAdapter({"url": "http://localhost:3002"})
        
        # Obter ferramentas
        redis_tools = redis_adapter.tools
        mongodb_tools = mongodb_adapter.tools
        all_tools = redis_tools + mongodb_tools
        
        # Criar agente
        agent = Agent(
            role="Database Manager",
            goal="Gerenciar dados em Redis e MongoDB",
            backstory="Administrador experiente de bancos de dados",
            tools=all_tools
        )
        
        # Criar tarefa
        task = Task(
            description="Executar opera√ß√µes de CRUD nos bancos de dados",
            agent=agent,
            expected_output="Confirma√ß√£o das opera√ß√µes realizadas"
        )
        
        # Executar crew
        crew = Crew(agents=[agent], tasks=[task])
        result = crew.kickoff()
        
        return result
        
    finally:
        # IMPORTANTE: Sempre fechar conex√µes manualmente
        if redis_adapter:
            redis_adapter.stop()
        if mongodb_adapter:
            mongodb_adapter.stop()

# Executar
result = create_crew_manual_mcp()
print(result)

üéØ Configura√ß√µes Espec√≠ficas por Protocolo
1. Para MCP Redis (SSE)
# Configura√ß√£o SSE para Redis
redis_config = {
    "url": "http://localhost:3001/sse",
    "timeout": 30,  # Timeout em segundos
    "headers": {    # Headers personalizados se necess√°rio
        "Authorization": "Bearer seu-token"
    }
}

with MCPServerAdapter(redis_config) as tools:
    # Usar ferramentas Redis
    pass

2. Para MCP MongoDB (STDIO)
from mcp import StdioServerParameters

# Configura√ß√£o STDIO para MongoDB
mongodb_stdio = StdioServerParameters(
    command="python",
    args=["-m", "seu_mcp_mongodb"],
    env={
        "MONGODB_URI": "mongodb://localhost:27017",
        "DATABASE_NAME": "seu_database",
        **os.environ
    }
)

with MCPServerAdapter(mongodb_stdio) as tools:
    # Usar ferramentas MongoDB
    pass

üîç Diagn√≥stico e Debug
1. Verificar Conex√£o com MCPs
def test_mcp_connection():
    try:
        # Testar Redis MCP
        redis_params = {"url": "http://localhost:3001/sse"}
        with MCPServerAdapter(redis_params) as redis_tools:
            print(f"‚úÖ Redis MCP: {len(redis_tools)} ferramentas dispon√≠veis")
            for tool in redis_tools:
                print(f"  - {tool.name}: {tool.description}")
    
    except Exception as e:
        print(f"‚ùå Erro Redis MCP: {e}")
    
    try:
        # Testar MongoDB MCP
        mongodb_params = {"url": "http://localhost:3002"}
        with MCPServerAdapter(mongodb_params) as mongodb_tools:
            print(f"‚úÖ MongoDB MCP: {len(mongodb_tools)} ferramentas dispon√≠veis")
            for tool in mongodb_tools:
                print(f"  - {tool.name}: {tool.description}")
                
    except Exception as e:
        print(f"‚ùå Erro MongoDB MCP: {e}")

# Executar diagn√≥stico
test_mcp_connection()

2. Debug de Ferramentas
def debug_mcp_tools():
    with MCPServerAdapter({"url": "http://localhost:3001/sse"}) as tools:
        for tool in tools:
            print(f"Nome: {tool.name}")
            print(f"Descri√ß√£o: {tool.description}")
            print(f"Argumentos: {getattr(tool, 'args_schema', 'N/A')}")
            print("-" * 50)

debug_mcp_tools()

üõ°Ô∏è Tratamento de Erros
Implementa√ß√£o Robusta com Try-Catch
def robust_mcp_crew():
    adapters = []
    
    try:
        # Lista de configura√ß√µes MCP
        mcp_configs = [
            {"name": "redis", "config": {"url": "http://localhost:3001/sse"}},
            {"name": "mongodb", "config": {"url": "http://localhost:3002"}},
        ]
        
        all_tools = []
        
        # Conectar a cada MCP com tratamento de erro individual
        for mcp_config in mcp_configs:
            try:
                adapter = MCPServerAdapter(mcp_config["config"])
                adapters.append(adapter)
                tools = adapter.tools
                all_tools.extend(tools)
                print(f"‚úÖ {mcp_config['name']}: {len(tools)} ferramentas carregadas")
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao conectar {mcp_config['name']}: {e}")
                continue
        
        if not all_tools:
            raise Exception("Nenhuma ferramenta MCP dispon√≠vel")
        
        # Criar e executar crew com ferramentas dispon√≠veis
        agent = Agent(
            role="Data Processor",
            goal="Processar dados com ferramentas dispon√≠veis",
            backstory="Adapt√°vel a diferentes fontes de dados",
            tools=all_tools
        )
        
        task = Task(
            description="Executar opera√ß√µes com ferramentas dispon√≠veis",
            agent=agent,
            expected_output="Resultado das opera√ß√µes"
        )
        
        crew = Crew(agents=[agent], tasks=[task])
        return crew.kickoff()
        
    except Exception as e:
        print(f"‚ùå Erro cr√≠tico: {e}")
        return None
        
    finally:
        # Limpar todas as conex√µes
        for adapter in adapters:
            try:
                adapter.stop()
            except:
                pass

# Executar vers√£o robusta
result = robust_mcp_crew()

üìö Exemplo Completo Multi-Tenant
Implementa√ß√£o com Suporte Multi-Tenant
class MCPCrewManager:
    def __init__(self, tenant_id):
        self.tenant_id = tenant_id
        self.adapters = []
    
    def get_mcp_configs(self):
        """Retorna configura√ß√µes MCP espec√≠ficas do tenant"""
        return [
            {
                "name": "redis",
                "config": {
                    "url": f"http://localhost:3001/sse?tenant={self.tenant_id}"
                }
            },
            {
                "name": "mongodb", 
                "config": {
                    "url": f"http://localhost:3002?tenant={self.tenant_id}"
                }
            }
        ]
    
    def create_crew(self, agent_config, task_description):
        try:
            all_tools = []
            
            # Conectar aos MCPs
            for mcp_config in self.get_mcp_configs():
                try:
                    adapter = MCPServerAdapter(mcp_config["config"])
                    self.adapters.append(adapter)
                    tools = adapter.tools
                    all_tools.extend(tools)
                    
                except Exception as e:
                    print(f"Erro MCP {mcp_config['name']}: {e}")
            
            # Criar agente com contexto do tenant
            agent = Agent(
                role=agent_config.get("role", "Data Agent"),
                goal=f"[Tenant {self.tenant_id}] {agent_config.get('goal', 'Process data')}",
                backstory=agent_config.get("backstory", "Tenant-specific agent"),
                tools=all_tools
            )
            
            # Criar tarefa
            task = Task(
                description=f"[Tenant {self.tenant_id}] {task_description}",
                agent=agent,
                expected_output="Tenant-specific results"
            )
            
            # Executar crew
            crew = Crew(agents=[agent], tasks=[task])
            return crew.kickoff()
            
        finally:
            self.cleanup()
    
    def cleanup(self):
        """Limpar todas as conex√µes"""
        for adapter in self.adapters:
            try:
                adapter.stop()
            except:
                pass
        self.adapters.clear()

# Uso multi-tenant
def run_tenant_crew(tenant_id):
    manager = MCPCrewManager(tenant_id)
    
    agent_config = {
        "role": "Analista de Dados",
        "goal": "Analisar dados espec√≠ficos do tenant",
        "backstory": "Especialista em an√°lise de dados corporativos"
    }
    
    task_description = "Recuperar m√©tricas e gerar relat√≥rio anal√≠tico"
    
    return manager.create_crew(agent_config, task_description)

# Executar para tenant espec√≠fico
result = run_tenant_crew("account_1")
print(result)

‚ö° Otimiza√ß√µes e Melhores Pr√°ticas
1. Pool de Conex√µes
class MCPConnectionPool:
    def __init__(self):
        self.connections = {}
    
    def get_connection(self, name, config):
        if name not in self.connections:
            self.connections[name] = MCPServerAdapter(config)
        return self.connections[name]
    
    def close_all(self):
        for adapter in self.connections.values():
            adapter.stop()
        self.connections.clear()

# Uso do pool
pool = MCPConnectionPool()
redis_adapter = pool.get_connection("redis", {"url": "http://localhost:3001/sse"})
mongodb_adapter = pool.get_connection("mongodb", {"url": "http://localhost:3002"})

2. Cache de Ferramentas
import functools
import time

@functools.lru_cache(maxsize=128)
def get_cached_tools(mcp_url, cache_time=300):
    """Cache ferramentas MCP por 5 minutos"""
    with MCPServerAdapter({"url": mcp_url}) as tools:
        return [(tool.name, tool.description) for tool in tools]

# Uso do cache
tools_info = get_cached_tools("http://localhost:3001/sse")

üêõ Troubleshooting
Problemas Comuns e Solu√ß√µes
Erro de Conex√£o MCP

 # Verificar se o servidor MCP est√° rodando
import requests
try:
    response = requests.get("http://localhost:3001/health", timeout=5)
    print(f"MCP Status: {response.status_code}")
except:
    print("‚ùå MCP n√£o est√° acess√≠vel")


Timeout de Conex√£o

 # Aumentar timeout
config = {
    "url": "http://localhost:3001/sse",
    "timeout": 60  # 60 segundos
}


Ferramentas N√£o Carregadas

 # Debug de ferramentas
with MCPServerAdapter(config) as tools:
    if not tools:
        print("‚ùå Nenhuma ferramenta encontrada")
    else:
        print(f"‚úÖ {len(tools)} ferramentas carregadas")


üöÄ Pr√≥ximos Passos
Testar Configura√ß√£o B√°sica: Execute o exemplo simples primeiro
Adaptar URLs: Substitua as URLs pelos endere√ßos reais dos seus MCPs
Implementar Multi-Tenant: Use os exemplos multi-tenant se necess√°rio
Monitorar Performance: Implemente logs e m√©tricas
Escalar Gradualmente: Adicione mais MCPs conforme necess√°rio
üìù Checklist de Implementa√ß√£o
[ ] Instalar crewai-tools[mcp]
[ ] Verificar conex√£o com MCP Redis (SSE)
[ ] Verificar conex√£o com MCP MongoDB
[ ] Testar carregamento de ferramentas
[ ] Implementar exemplo b√°sico
[ ] Adicionar tratamento de erros
[ ] Implementar suporte multi-tenant
[ ] Adicionar logs e monitoramento
[ ] Testar em ambiente de produ√ß√£o

Importante: Este guia assume que seus servidores MCP est√£o funcionando corretamente. Certifique-se de que eles est√£o acess√≠veis nas URLs especificadas antes de executar os exemplos.

