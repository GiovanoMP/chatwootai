#!/usr/bin/env python3
"""
Script Simplificado para Iniciar Ngrok e Configurar Webhook

Este script:
1. Inicia o Ngrok para expor o servidor webhook local
2. Obt√©m a URL p√∫blica gerada pelo Ngrok
3. Atualiza o webhook no Chatwoot API
4. Fornece instru√ß√µes para atualiza√ß√£o manual do proxy na VPS
"""

import os
import sys
import subprocess
import time
import json
import requests
import logging
from datetime import datetime
from pathlib import Path
from dotenv import load_dotenv

# Configurar logging
logging.basicConfig(level=logging.INFO, 
                   format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
logger = logging.getLogger('ngrok_script')

def load_env_vars():
    """Carrega vari√°veis de ambiente do arquivo .env."""
    # Encontrar o diret√≥rio raiz do projeto
    current_dir = Path(__file__).resolve().parent
    root_dir = current_dir.parent.parent  # Subir dois n√≠veis: webhook/scripts -> projeto raiz
    
    # Caminho para o arquivo .env
    env_path = root_dir / '.env'
    
    if env_path.exists():
        print(f"üìÅ Carregando vari√°veis de ambiente de {env_path}")
        load_dotenv(dotenv_path=env_path)
    else:
        print(f"‚ö†Ô∏è Arquivo .env n√£o encontrado em {env_path}")

def get_ngrok_url():
    """Obt√©m a URL p√∫blica do ngrok consultando sua API local."""
    try:
        response = requests.get("http://localhost:4040/api/tunnels")
        tunnels = response.json()["tunnels"]
        for tunnel in tunnels:
            if tunnel["proto"] == "https":
                return tunnel["public_url"]
    except Exception as e:
        print(f"‚ùå Erro ao obter URL do ngrok: {str(e)}")
    return None

def update_chatwoot_webhook(webhook_url):
    """Atualiza a configura√ß√£o do webhook no Chatwoot API."""
    api_key = os.environ.get("CHATWOOT_API_KEY")
    base_url = os.environ.get("CHATWOOT_BASE_URL")
    account_id = os.environ.get("CHATWOOT_ACCOUNT_ID")
    
    if not api_key or not base_url or not account_id:
        print("‚ùå Credenciais do Chatwoot n√£o encontradas no arquivo .env")
        return False
    
    print(f"üîÑ Atualizando webhook no Chatwoot...")
    print(f"   URL Base: {base_url}")
    print(f"   Conta ID: {account_id}")
    print(f"   Nova URL: {webhook_url}")
    
    # Endpoint para atualizar as configura√ß√µes da conta
    url = f"{base_url}/accounts/{account_id}/webhook_settings"
    
    # Cabe√ßalhos da requisi√ß√£o
    headers = {
        "api_access_token": api_key,
        "Content-Type": "application/json"
    }
    
    # Dados para atualizar o webhook
    data = {
        "webhook_url": webhook_url
    }
    
    try:
        # Enviar requisi√ß√£o para atualizar o webhook
        response = requests.put(url, headers=headers, json=data)
        
        # Verificar se a requisi√ß√£o foi bem-sucedida
        if response.status_code == 200:
            print("‚úÖ Webhook atualizado com sucesso no Chatwoot!")
            return True
        else:
            print(f"‚ùå Erro ao atualizar webhook no Chatwoot: {response.status_code}")
            print(f"   Resposta: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao comunicar com a API do Chatwoot: {str(e)}")
        return False

def print_vps_instructions(webhook_url):
    """Exibe instru√ß√µes para atualiza√ß√£o manual do proxy na VPS."""
    vps_host = os.environ.get("VPS_HOST", "srv692745.hstgr.cloud")
    vps_user = os.environ.get("VPS_USER", "root")
    container_name = os.environ.get("PROXY_CONTAINER_NAME", "05abfcd7e2aa")
    proxy_file_path = os.environ.get("PROXY_FILE_PATH", "/app/simple_webhook.py")
    
    print("\n" + "="*80)
    print("üìù INSTRU√á√ïES PARA ATUALIZA√á√ÉO MANUAL DO PROXY NA VPS")
    print("="*80)
    print(f"1. Conecte-se √† VPS via SSH:")
    print(f"   ssh {vps_user}@{vps_host}")
    print(f"   (Digite a senha quando solicitado)")
    print()
    print(f"2. Verifique se o container existe:")
    print(f"   docker ps -a | grep {container_name}")
    print()
    print(f"3. Se o container estiver parado, inicie-o:")
    print(f"   docker start {container_name}")
    print()
    print(f"4. Verifique se o arquivo do proxy existe:")
    print(f"   docker exec {container_name} ls -la {proxy_file_path}")
    print()
    print(f"5. Fa√ßa backup do arquivo atual:")
    print(f"   docker exec {container_name} cp {proxy_file_path} {proxy_file_path}.bak")
    print()
    print(f"6. Atualize a URL no arquivo (COPIE E COLE ESTE COMANDO EXATAMENTE COMO EST√Å):")
    print(f"   docker exec {container_name} sed -i \"s|FORWARD_URL *= *[\\\"'][^\\\"']*[\\\"']|FORWARD_URL = '{webhook_url}'|g\" {proxy_file_path}")
    print()
    print(f"7. Verifique se a atualiza√ß√£o foi bem-sucedida:")
    print(f"   docker exec {container_name} grep -A 1 -B 1 FORWARD_URL {proxy_file_path}")
    print()
    print(f"8. Reinicie o container para aplicar as mudan√ßas:")
    print(f"   docker restart {container_name}")
    print("="*80)

def main():
    """Fun√ß√£o principal para iniciar e monitorar o ngrok."""
    try:
        # Carregar vari√°veis de ambiente
        load_env_vars()
        
        print("\n" + "="*80)
        print("üöÄ INICIANDO NGROK PARA O WEBHOOK")
        print("="*80)
        
        # Verificar se o ngrok j√° est√° em execu√ß√£o
        try:
            existing_url = get_ngrok_url()
            if existing_url:
                print(f"üîç Ngrok j√° est√° em execu√ß√£o!")
                print(f"üåê URL atual: {existing_url}")
                
                # Perguntar se deseja usar a URL existente
                use_existing = input("\n‚ùì Deseja usar esta URL existente? (s/n): ").lower()
                if use_existing == 's' or use_existing == 'sim':
                    ngrok_url = existing_url
                else:
                    print("\nüîÑ Encerrando o ngrok existente...")
                    subprocess.run(["pkill", "-f", "ngrok"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
                    time.sleep(2)
                    ngrok_url = None
            else:
                ngrok_url = None
        except Exception:
            ngrok_url = None
        
        # Iniciar o ngrok se necess√°rio
        if not ngrok_url:
            # Obter configura√ß√µes
            ngrok_token = os.environ.get("NGROK_AUTH_TOKEN")
            webhook_port = os.environ.get("WEBHOOK_PORT", "8001")
            webhook_host = os.environ.get("WEBHOOK_HOST", "0.0.0.0")
            
            if not ngrok_token:
                print("‚ùå Token de autentica√ß√£o do ngrok n√£o encontrado no arquivo .env")
                return
            
            print(f"\nüöÄ Iniciando ngrok para o servidor webhook ({webhook_host}:{webhook_port})...")
            
            # Iniciar o ngrok em segundo plano
            ngrok_command = f"ngrok http {webhook_host}:{webhook_port} --log=stdout"
            subprocess.Popen(
                ngrok_command,
                shell=True,
                stdout=subprocess.DEVNULL,
                stderr=subprocess.DEVNULL
            )
            
            # Aguardar o ngrok iniciar
            print("‚è≥ Aguardando o ngrok iniciar (isso pode levar alguns segundos)...")
            time.sleep(5)
            
            # Obter a URL do ngrok
            for i in range(5):
                ngrok_url = get_ngrok_url()
                if ngrok_url:
                    break
                print(f"‚è≥ Tentativa {i+1}/5: Aguardando URL do ngrok...")
                time.sleep(2)
            
            if not ngrok_url:
                print("‚ùå N√£o foi poss√≠vel obter a URL do ngrok ap√≥s v√°rias tentativas")
                return
        
        # Construir a URL completa do webhook
        webhook_url = f"{ngrok_url}/webhook"
        
        print("\n" + "="*80)
        print("‚úÖ NGROK INICIADO COM SUCESSO!")
        print("="*80)
        print(f"üåê URL do Ngrok: {ngrok_url}")
        print(f"üîó URL do Webhook: {webhook_url}")
        print("="*80)
        
        # Perguntar se deseja atualizar o webhook no Chatwoot
        print("\n" + "="*80)
        print("üîÑ ATUALIZA√á√ÉO DO WEBHOOK NO CHATWOOT")
        print("="*80)
        update_chatwoot = input("‚ùì Deseja atualizar o webhook no Chatwoot? (s/n): ").lower()
        
        if update_chatwoot == 's' or update_chatwoot == 'sim':
            update_chatwoot_webhook(webhook_url)
        else:
            print("‚è≠Ô∏è Atualiza√ß√£o do Chatwoot ignorada pelo usu√°rio.")
        
        # Exibir instru√ß√µes para atualiza√ß√£o manual do proxy na VPS
        print_vps_instructions(webhook_url)
        
        # Exibir mensagem de conclus√£o
        print("\n" + "="*80)
        print("üéâ RESUMO DA CONFIGURA√á√ÉO")
        print("="*80)
        print(f"üåê URL do Ngrok: {ngrok_url}")
        print(f"üîó URL do Webhook: {webhook_url}")
        
        if update_chatwoot == 's' or update_chatwoot == 'sim':
            print("‚úÖ Chatwoot: Webhook atualizado")
        else:
            print("‚è≠Ô∏è Chatwoot: Atualiza√ß√£o ignorada")
        
        print("‚ö†Ô∏è VPS: Instru√ß√µes fornecidas para atualiza√ß√£o manual")
        print("="*80)
        
        # Manter o script em execu√ß√£o para monitorar o ngrok
        print("\n‚è≥ Monitorando o ngrok... Pressione Ctrl+C para encerrar.")
        
        # Loop para manter o script em execu√ß√£o
        while True:
            time.sleep(60)  # Verificar a cada minuto
            current_url = get_ngrok_url()
            if not current_url:
                print("\n‚ö†Ô∏è Ngrok n√£o est√° mais em execu√ß√£o!")
                break
            elif current_url != ngrok_url:
                print(f"\n‚ö†Ô∏è URL do ngrok mudou: {current_url}")
                ngrok_url = current_url
                webhook_url = f"{ngrok_url}/webhook"
                print(f"üîó Nova URL do webhook: {webhook_url}")
                
                # Perguntar se deseja atualizar com a nova URL
                update_new = input("\n‚ùì A URL do ngrok mudou. Deseja atualizar os webhooks? (s/n): ").lower()
                if update_new == 's' or update_new == 'sim':
                    # Atualizar o webhook no Chatwoot
                    update_chatwoot_webhook(webhook_url)
                    # Exibir instru√ß√µes para atualiza√ß√£o manual do proxy na VPS
                    print_vps_instructions(webhook_url)
    
    except KeyboardInterrupt:
        print("\nüëã Encerrando o script...")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {str(e)}")
        import traceback
        print(f"üìã Detalhes do erro:\n{traceback.format_exc()}")
    finally:
        print("\nüëã Script encerrado.")
        
        # Perguntar se deseja encerrar o ngrok
        stop_ngrok = input("\n‚ùì Deseja encerrar o ngrok? (s/n): ").lower()
        if stop_ngrok == 's' or stop_ngrok == 'sim':
            print("üîÑ Encerrando o ngrok...")
            subprocess.run(["pkill", "-f", "ngrok"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            print("‚úÖ Ngrok encerrado.")
        else:
            print("‚ÑπÔ∏è O ngrok continuar√° em execu√ß√£o em segundo plano.")
            print("   Para encerr√°-lo manualmente, execute: pkill -f ngrok")

if __name__ == "__main__":
    main()
