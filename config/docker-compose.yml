version: '3.8'

services:
  # Serviço CrewAI principal
  crewai:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatwootai_crewai
    restart: unless-stopped
    volumes:
      - ./:/app
    environment:
      - CHATWOOT_API_KEY=${CHATWOOT_API_KEY}
      - CHATWOOT_BASE_URL=${CHATWOOT_BASE_URL}
      - CHATWOOT_ACCOUNT_ID=${CHATWOOT_ACCOUNT_ID}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - QDRANT_URL=http://qdrant:6333
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    depends_on:
      - postgres
      - qdrant
      - redis
    networks:
      - network_public
      - network_internal

  # Serviço PostgreSQL para simulação do Odoo
  postgres:
    image: postgres:15-alpine
    container_name: chatwootai_postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "5433:5432"  # Mapeado para 5433 para evitar conflitos com o PostgreSQL do Chatwoot
    networks:
      - network_internal

  # Serviço Qdrant para armazenamento vetorial
  qdrant:
    image: qdrant/qdrant:latest
    container_name: chatwootai_qdrant
    restart: unless-stopped
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6335:6333"  # API REST (mapeado para 6335 externamente)
      - "6336:6334"  # gRPC (mapeado para 6336 externamente)
    networks:
      - network_internal
      
  # Serviço para inicializar o Qdrant com embeddings da OpenAI
  qdrant_init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatwootai_qdrant_init
    restart: "no"
    volumes:
      - ./:/app
    command: python3 /app/init-scripts/03_initialize_qdrant_openai.py
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - DATABASE_URL=postgresql://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB}
      - QDRANT_URL=http://qdrant:6333
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
    depends_on:
      - postgres
      - qdrant
    networks:
      - network_internal

  # Serviço Redis para cache e memória compartilhada
  redis:
    image: redis:7-alpine
    container_name: chatwootai_redis
    restart: unless-stopped
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"  # Mapeando a porta 6379 para acesso externo
    command: redis-server --appendonly yes
    networks:
      - network_internal

  # API de simulação do Odoo
  odoo_simulation:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: chatwootai_odoo_simulation
    restart: unless-stopped
    volumes:
      - ./:/app
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8000:8000"
    depends_on:
      - postgres
    networks:
      - network_internal
      - network_public

  # Serviço de webhook para receber eventos do Chatwoot
  webhook_server:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatwootai_webhook
    restart: unless-stopped
    volumes:
      - ./:/app
    environment:
      - CHATWOOT_API_KEY=${CHATWOOT_API_KEY}
      - CHATWOOT_BASE_URL=${CHATWOOT_BASE_URL}
      - CHATWOOT_ACCOUNT_ID=${CHATWOOT_ACCOUNT_ID}
      - WEBHOOK_PORT=${WEBHOOK_PORT:-8001}
      - WEBHOOK_DOMAIN=${WEBHOOK_DOMAIN:-localhost}
      - WEBHOOK_USE_HTTPS=${WEBHOOK_USE_HTTPS:-false}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - QDRANT_URL=${QDRANT_URL}
      - REDIS_URL=${REDIS_URL}
      - DATABASE_URL=${DATABASE_URL}
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "${WEBHOOK_PORT:-8001}:${WEBHOOK_PORT:-8001}"
    command: python -m src.api.webhook_server
    depends_on:
      - crewai
      - postgres
      - redis
    networks:
      - network_public
      - network_internal
    # Garantir que o contêiner seja reiniciado em caso de falha
    deploy:
      restart_policy:
        condition: on-failure
        max_attempts: 5

  # Serviço de monitoramento (opcional)
  monitoring:
    image: prom/prometheus:latest
    container_name: chatwootai_monitoring
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - network_internal

volumes:
  postgres_data:
  qdrant_data:
  redis_data:
  prometheus_data:

networks:
  # Rede interna para comunicação entre serviços
  network_internal:
    driver: bridge
  # Rede compartilhada com outros serviços (Chatwoot, Evolution API, etc.)
  network_public:
    external: true
