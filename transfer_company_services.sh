#!/bin/bash

# Cores para mensagens
GREEN="\033[0;32m"
YELLOW="\033[0;33m"
RED="\033[0;31m"
BLUE="\033[0;34m"
RESET="\033[0m"
BOLD="\033[1m"

# Configura√ß√µes
MODULE_NAME="company_services"
SOURCE_DIR="/home/giovano/Projetos/ai_stack/custom_addons/$MODULE_NAME"
TARGET_DIR="/home/giovano/Projetos/odoo16/custom-addons/$MODULE_NAME"
BACKUP_DIR="/home/giovano/Projetos/backups/modules"

# Fun√ß√£o para exibir mensagens
function echo_status() {
    local color=$1
    local icon=$2
    local message=$3
    local color_code
    
    case $color in
        "green") color_code=$GREEN ;;
        "yellow") color_code=$YELLOW ;;
        "red") color_code=$RED ;;
        "blue") color_code=$BLUE ;;
        *) color_code="" ;;
    esac
    
    echo -e "${color_code}${icon} ${message}${RESET}"
}

# Fun√ß√£o para verificar arquivos XML
function check_xml_files() {
    local dir=$1
    local has_errors=false
    
    # Verifica se xmllint est√° instalado
    if ! command -v xmllint &> /dev/null; then
        echo_status "yellow" "‚ö†Ô∏è" "xmllint n√£o encontrado. Pulando verifica√ß√£o de XML."
        return 0
    fi
    
    echo_status "blue" "üîç" "Verificando arquivos XML em $dir..."
    
    # Encontra todos os arquivos XML no diret√≥rio
    find "$dir" -name "*.xml" | while read -r xml_file; do
        echo_status "blue" "üìÑ" "Verificando $xml_file"
        
        # Verifica a sintaxe do XML
        if ! xmllint --noout "$xml_file" 2>/tmp/xml_error; then
            echo_status "red" "‚ùå" "Erro de XML encontrado em $xml_file:"
            cat /tmp/xml_error
            has_errors=true
        fi
    done
    
    if [ "$has_errors" = true ]; then
        echo_status "yellow" "‚ö†Ô∏è" "Foram encontrados erros de XML. Deseja continuar mesmo assim? (s/N)"
        read -r continue_choice
        if [[ ! "$continue_choice" =~ ^[Ss]$ ]]; then
            echo_status "red" "‚ùå" "Transfer√™ncia cancelada pelo usu√°rio."
            exit 1
        fi
    else
        echo_status "green" "‚úÖ" "Todos os arquivos XML est√£o v√°lidos."
    fi
}

# Fun√ß√£o para criar backup
function create_backup() {
    if [ -d "$TARGET_DIR" ]; then
        echo_status "blue" "üíæ" "Criando backup do m√≥dulo existente..."
        
        # Cria diret√≥rio de backup se n√£o existir
        if [ ! -d "$BACKUP_DIR" ]; then
            mkdir -p "$BACKUP_DIR"
        fi
        
        # Nome do arquivo de backup
        local backup_file="$BACKUP_DIR/${MODULE_NAME}_$(date +%Y%m%d_%H%M%S).tar.gz"
        
        # Cria o backup
        tar -czf "$backup_file" -C "$(dirname "$TARGET_DIR")" "$(basename "$TARGET_DIR")"
        if [ $? -eq 0 ]; then
            echo_status "green" "‚úÖ" "Backup criado com sucesso em $backup_file"
        else
            echo_status "yellow" "‚ö†Ô∏è" "Falha ao criar backup. Continuando sem backup..."
        fi
    fi
}

echo -e "\n${BOLD}Transferindo m√≥dulo ${MODULE_NAME}...${RESET}\n"

# Verifica se o diret√≥rio de origem existe
if [ ! -d "$SOURCE_DIR" ]; then
    # Tenta caminho alternativo
    SOURCE_DIR="/home/giovano/Projetos/ai_stack/custom-addons/$MODULE_NAME"
    if [ ! -d "$SOURCE_DIR" ]; then
        echo_status "red" "‚ùå" "Erro: N√£o foi poss√≠vel encontrar o diret√≥rio do m√≥dulo $MODULE_NAME."
        exit 1
    fi
fi

echo_status "green" "‚úÖ" "Diret√≥rio de origem encontrado: $SOURCE_DIR"

# Verifica arquivos XML antes da transfer√™ncia
check_xml_files "$SOURCE_DIR"

# Cria backup do m√≥dulo existente
create_backup

# Remove o m√≥dulo no diret√≥rio de destino se existir
if [ -d "$TARGET_DIR" ]; then
    echo_status "yellow" "üöÆ" "Removendo m√≥dulo existente em $TARGET_DIR..."
    rm -rf "$TARGET_DIR"
fi

# Cria o diret√≥rio de destino se n√£o existir
mkdir -p "/home/giovano/Projetos/odoo16/custom-addons"

# Copia o m√≥dulo para o diret√≥rio de destino
echo_status "blue" "üìù" "Copiando $MODULE_NAME de $SOURCE_DIR para $TARGET_DIR..."
cp -r "$SOURCE_DIR" "$TARGET_DIR"

# Verifica se a c√≥pia foi bem-sucedida
if [ $? -eq 0 ]; then
    echo_status "green" "üéâ" "Transfer√™ncia do m√≥dulo $MODULE_NAME conclu√≠da com sucesso!"
    echo_status "yellow" "‚ÑπÔ∏è" "N√£o esque√ßa de reiniciar o servidor Odoo para aplicar as altera√ß√µes."
    echo_status "blue" "üîÑ" "Comando: sudo systemctl restart odoo"
    
    # Lista todos os poss√≠veis servi√ßos Odoo para ajudar o usu√°rio
    for service in "odoo" "odoo16" "odoo-server" "odoo-bin" "odoo15" "odoo14"; do
        if command -v systemctl &> /dev/null && systemctl list-unit-files | grep -q "$service\.service"; then
            echo -e "   ${BLUE}sudo systemctl restart $service${RESET}"
        fi
    done
else
    echo_status "red" "‚ùå" "Erro ao copiar o m√≥dulo. Verifique as permiss√µes e tente novamente."
    exit 1
fi

exit 0
