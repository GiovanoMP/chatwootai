#!/bin/bash

# Script para reiniciar o servi√ßo de configura√ß√£o e o visualizador de configura√ß√µes

# Cores para sa√≠da
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Diret√≥rio base
BASE_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
CONFIG_SERVICE_DIR="${BASE_DIR}/config-service"
CONFIG_VIEWER_DIR="${BASE_DIR}/config-viewer"

# Fun√ß√£o para exibir cabe√ßalho
show_header() {
    echo -e "\n${YELLOW}======================================================================${NC}"
    echo -e "${GREEN}$1${NC}"
    echo -e "${YELLOW}======================================================================${NC}"
}

# Fun√ß√£o para matar processos
kill_processes() {
    show_header "üöÄ REINICIANDO SERVI√áOS DE CONFIGURA√á√ÉO"
    
    echo -e "${BLUE}üîç Procurando processos do servi√ßo de configura√ß√£o...${NC}"
    CONFIG_SERVICE_PIDS=$(pgrep -f "python.*run.py")
    if [[ -n "$CONFIG_SERVICE_PIDS" ]]; then
        echo -e "${RED}üõë Matando processo do servi√ßo de configura√ß√£o (PID: ${CONFIG_SERVICE_PIDS})...${NC}"
        kill -9 $CONFIG_SERVICE_PIDS
        echo -e "${GREEN}‚úÖ Processo do servi√ßo de configura√ß√£o finalizado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum processo do servi√ßo de configura√ß√£o encontrado${NC}"
    fi
    
    echo -e "${BLUE}üîç Procurando processos do visualizador de configura√ß√µes...${NC}"
    CONFIG_VIEWER_PIDS=$(pgrep -f "python.*app.py")
    if [[ -n "$CONFIG_VIEWER_PIDS" ]]; then
        echo -e "${RED}üõë Matando processo do visualizador de configura√ß√µes (PID: ${CONFIG_VIEWER_PIDS})...${NC}"
        kill -9 $CONFIG_VIEWER_PIDS
        echo -e "${GREEN}‚úÖ Processo do visualizador de configura√ß√µes finalizado${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Nenhum processo do visualizador de configura√ß√µes encontrado${NC}"
    fi
}

# Fun√ß√£o para iniciar o servi√ßo de configura√ß√£o
start_config_service() {
    echo -e "${BLUE}üñ•Ô∏è Iniciando servi√ßo de configura√ß√£o...${NC}"
    cd "${CONFIG_SERVICE_DIR}" && python run.py > /dev/null 2>&1 &
    CONFIG_SERVICE_PID=$!
    echo -e "${GREEN}‚úÖ Servi√ßo de configura√ß√£o iniciado com PID: ${CONFIG_SERVICE_PID}${NC}"
    
    # Aguardar o servi√ßo iniciar
    echo -e "${YELLOW}‚è≥ Aguardando o servi√ßo de configura√ß√£o iniciar (5 segundos)...${NC}"
    sleep 5
    
    # Verificar se o servi√ßo est√° em execu√ß√£o
    if kill -0 $CONFIG_SERVICE_PID 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Servi√ßo de configura√ß√£o iniciado com sucesso!${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è Servi√ßo de configura√ß√£o pode n√£o ter iniciado corretamente. Verifique os logs.${NC}"
    fi
}

# Fun√ß√£o para iniciar o visualizador de configura√ß√µes
start_config_viewer() {
    echo -e "${BLUE}üñ•Ô∏è Iniciando visualizador de configura√ß√µes...${NC}"
    cd "${CONFIG_VIEWER_DIR}" && python app.py > /dev/null 2>&1 &
    CONFIG_VIEWER_PID=$!
    echo -e "${GREEN}‚úÖ Visualizador de configura√ß√µes iniciado com PID: ${CONFIG_VIEWER_PID}${NC}"
    
    # Aguardar o visualizador iniciar
    echo -e "${YELLOW}‚è≥ Aguardando o visualizador de configura√ß√µes iniciar (5 segundos)...${NC}"
    sleep 5
    
    # Verificar se o visualizador est√° em execu√ß√£o
    if kill -0 $CONFIG_VIEWER_PID 2>/dev/null; then
        echo -e "${GREEN}‚úÖ Visualizador de configura√ß√µes iniciado com sucesso!${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è Visualizador de configura√ß√µes pode n√£o ter iniciado corretamente. Verifique os logs.${NC}"
    fi
}

# Fun√ß√£o para verificar a sa√∫de do servi√ßo de configura√ß√£o
check_config_service_health() {
    echo -e "${BLUE}üîç Verificando sa√∫de do servi√ßo de configura√ß√£o...${NC}"
    HEALTH_CHECK=$(curl -s http://localhost:8002/health)
    if [[ "$HEALTH_CHECK" == *"healthy"* ]]; then
        echo -e "${GREEN}‚úÖ Servi√ßo de configura√ß√£o est√° saud√°vel!${NC}"
        echo -e "${GREEN}‚úÖ Resposta: ${HEALTH_CHECK}${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è Servi√ßo de configura√ß√£o pode n√£o estar saud√°vel. Resposta: ${HEALTH_CHECK}${NC}"
    fi
}

# Fun√ß√£o para verificar a sa√∫de do visualizador de configura√ß√µes
check_config_viewer_health() {
    echo -e "${BLUE}üîç Verificando sa√∫de do visualizador de configura√ß√µes...${NC}"
    HEALTH_CHECK=$(curl -s http://localhost:8080)
    if [[ "$HEALTH_CHECK" == *"login"* ]]; then
        echo -e "${GREEN}‚úÖ Visualizador de configura√ß√µes est√° saud√°vel!${NC}"
    else
        echo -e "${RED}‚ö†Ô∏è Visualizador de configura√ß√µes pode n√£o estar saud√°vel.${NC}"
    fi
}

# Fun√ß√£o para exibir informa√ß√µes de acesso
show_access_info() {
    show_header "üìä INFORMA√á√ïES DE ACESSO"
    
    echo -e "${GREEN}‚úÖ Servi√ßo de configura√ß√£o: http://localhost:8002${NC}"
    echo -e "${GREEN}‚úÖ Documenta√ß√£o da API: http://localhost:8002/docs${NC}"
    echo -e "${GREEN}‚úÖ Visualizador de configura√ß√µes: http://localhost:8080${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Usu√°rio: admin${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è Senha: Config@Viewer2025!${NC}"
    
    echo -e "\n${BLUE}üìù Para monitorar os logs, execute:${NC}"
    echo -e "${YELLOW}   cd ${BASE_DIR} && ./scripts/restart_and_monitor_all.sh${NC}"
}

# Executar fun√ß√µes
kill_processes
start_config_service
start_config_viewer
check_config_service_health
check_config_viewer_health
show_access_info
