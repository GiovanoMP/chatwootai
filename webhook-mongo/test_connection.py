#!/usr/bin/env python3
"""
Script para testar a conex√£o entre o Odoo e o webhook-mongo.

Este script simula o envio de dados do m√≥dulo company_services para o webhook-mongo,
permitindo verificar se a conex√£o est√° funcionando corretamente.

Uso:
    python test_connection.py [--url URL] [--account-id ACCOUNT_ID] [--api-key API_KEY]
"""

import argparse
import requests
import json
import sys
import os
from datetime import datetime

# Configura√ß√µes padr√£o
DEFAULT_WEBHOOK_URL = "http://localhost:8003"
DEFAULT_API_KEY = "development-api-key"
DEFAULT_ACCOUNT_ID = "account_1"
DEFAULT_SECURITY_TOKEN = "abc123"

def parse_args():
    """Analisa os argumentos da linha de comando."""
    parser = argparse.ArgumentParser(description="Testa a conex√£o com o webhook-mongo")
    parser.add_argument("--url", default=DEFAULT_WEBHOOK_URL,
                        help=f"URL do webhook-mongo (padr√£o: {DEFAULT_WEBHOOK_URL})")
    parser.add_argument("--account-id", default=DEFAULT_ACCOUNT_ID,
                        help=f"ID da conta (padr√£o: {DEFAULT_ACCOUNT_ID})")
    parser.add_argument("--api-key", default=DEFAULT_API_KEY,
                        help=f"Chave de API (padr√£o: {DEFAULT_API_KEY})")
    parser.add_argument("--security-token", default=DEFAULT_SECURITY_TOKEN,
                        help=f"Token de seguran√ßa (padr√£o: {DEFAULT_SECURITY_TOKEN})")
    parser.add_argument("--verbose", "-v", action="store_true",
                        help="Exibir informa√ß√µes detalhadas")
    
    return parser.parse_args()

def create_test_yaml(account_id, security_token):
    """Cria um YAML de teste para enviar ao webhook."""
    yaml_content = f"""account_id: {account_id}
security_token: {security_token}
name: Empresa Teste
description: Configura√ß√£o de teste para {account_id}
version: 1
updated_at: {datetime.now().isoformat()}
enabled_modules:
  - company_info
  - service_settings
  - enabled_services
  - mcp
  - channels
modules:
  company_info:
    name: Empresa Teste
    description: Descri√ß√£o da empresa teste
    address:
      street: Rua Teste, 123
      city: Cidade Teste
      state: Estado Teste
      zip: 12345-678
      country: Brasil
      share_with_customers: true
  service_settings:
    business_hours:
      days:
        monday: {{ open: true, start: "08:00", end: "18:00" }}
        tuesday: {{ open: true, start: "08:00", end: "18:00" }}
        wednesday: {{ open: true, start: "08:00", end: "18:00" }}
        thursday: {{ open: true, start: "08:00", end: "18:00" }}
        friday: {{ open: true, start: "08:00", end: "18:00" }}
        saturday: {{ open: false }}
        sunday: {{ open: false }}
    greeting_message: Ol√°! Como posso ajudar voc√™ hoje?
    farewell_message: Obrigado por entrar em contato. Tenha um √≥timo dia!
  enabled_services:
    collections:
      - products_informations
      - scheduling_rules
      - support_documents
    services:
      sales:
        enabled: true
        promotions:
          inform_at_start: true
      scheduling:
        enabled: true
      delivery:
        enabled: false
      support:
        enabled: true
  mcp:
    type: odoo
    version: 14.0
    connection:
      url: http://localhost:8069
      database: {account_id}
      username: admin
      password_ref: {account_id}_db_pwd
      access_level: read
  channels:
    whatsapp:
      enabled: true
      services:
        - sales
        - scheduling
        - support
"""
    return yaml_content

def test_health(url, verbose=False):
    """Testa o endpoint de sa√∫de do webhook."""
    health_url = f"{url}/health"
    
    if verbose:
        print(f"\nüîç Testando endpoint de sa√∫de: {health_url}")
    
    try:
        response = requests.get(health_url, timeout=10)
        
        if verbose:
            print(f"üìä Status: {response.status_code}")
            print(f"üìÑ Resposta: {json.dumps(response.json(), indent=2) if response.status_code < 400 else response.text}")
        
        if response.status_code == 200:
            print("‚úÖ Endpoint de sa√∫de est√° funcionando!")
            return True
        else:
            print(f"‚ùå Endpoint de sa√∫de retornou status {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao acessar endpoint de sa√∫de: {str(e)}")
        return False

def test_webhook(url, account_id, api_key, security_token, verbose=False):
    """Testa o envio de dados para o webhook."""
    endpoint = f"{url}/company-services/{account_id}/metadata"
    
    if verbose:
        print(f"\nüîç Testando endpoint do webhook: {endpoint}")
    
    # Criar payload
    yaml_content = create_test_yaml(account_id, security_token)
    payload = {
        "yaml_content": yaml_content
    }
    
    # Preparar headers
    headers = {
        "Content-Type": "application/json",
        "X-API-Key": api_key,
        "X-Security-Token": security_token
    }
    
    if verbose:
        print(f"üì§ Enviando dados para o webhook...")
        print(f"üîë Headers: {json.dumps(headers, indent=2)}")
        print(f"üì¶ Payload: {json.dumps(payload, indent=2)}")
    
    try:
        response = requests.post(
            endpoint,
            json=payload,
            headers=headers,
            timeout=30
        )
        
        if verbose:
            print(f"üìä Status: {response.status_code}")
            print(f"üìÑ Resposta: {json.dumps(response.json(), indent=2) if response.status_code < 400 else response.text}")
        
        if response.status_code in (200, 201):
            print("‚úÖ Dados enviados com sucesso para o webhook!")
            return True
        else:
            print(f"‚ùå Erro ao enviar dados para o webhook: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå Erro ao enviar dados para o webhook: {str(e)}")
        return False

def test_connection_from_odoo(url, account_id, api_key, security_token, verbose=False):
    """Testa a conex√£o a partir do cont√™iner do Odoo."""
    if verbose:
        print("\nüîç Testando conex√£o a partir do cont√™iner do Odoo...")
    
    # Verificar se o cont√™iner do Odoo est√° rodando
    try:
        import subprocess
        result = subprocess.run(["docker", "ps", "--filter", "name=odoo", "--format", "{{.Names}}"], 
                               capture_output=True, text=True, check=True)
        odoo_containers = result.stdout.strip().split('\n')
        
        if not odoo_containers or odoo_containers[0] == '':
            print("‚ùå Nenhum cont√™iner do Odoo encontrado!")
            return False
        
        odoo_container = odoo_containers[0]
        
        if verbose:
            print(f"üê≥ Cont√™iner do Odoo encontrado: {odoo_container}")
        
        # Testar conex√£o a partir do cont√™iner do Odoo
        test_command = f"""
        curl -s -X POST \\
          '{url}/company-services/{account_id}/metadata' \\
          -H 'Content-Type: application/json' \\
          -H 'X-API-Key: {api_key}' \\
          -H 'X-Security-Token: {security_token}' \\
          -d '{{"yaml_content": "account_id: {account_id}\\nsecurity_token: {security_token}\\nname: Teste"}}'
        """
        
        if verbose:
            print(f"üß™ Executando comando de teste no cont√™iner do Odoo:")
            print(test_command)
        
        result = subprocess.run(["docker", "exec", odoo_container, "bash", "-c", test_command], 
                               capture_output=True, text=True)
        
        if verbose:
            print(f"üìä Sa√≠da: {result.stdout}")
            print(f"‚ùó Erro: {result.stderr}")
        
        if "success" in result.stdout.lower():
            print("‚úÖ Conex√£o a partir do cont√™iner do Odoo bem-sucedida!")
            return True
        else:
            print(f"‚ùå Erro na conex√£o a partir do cont√™iner do Odoo: {result.stderr}")
            
            # Sugerir solu√ß√µes
            print("\nüîß Poss√≠veis solu√ß√µes:")
            print("1. Verifique se o webhook-mongo est√° acess√≠vel a partir do cont√™iner do Odoo")
            print("2. Use o IP do host em vez de 'localhost' na URL do webhook")
            print("3. Certifique-se de que os cont√™ineres est√£o na mesma rede Docker")
            print("4. Verifique se n√£o h√° regras de firewall bloqueando a conex√£o")
            
            return False
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o a partir do cont√™iner do Odoo: {str(e)}")
        return False

def main():
    """Fun√ß√£o principal."""
    args = parse_args()
    
    print("="*80)
    print("üöÄ TESTE DE CONEX√ÉO COM O WEBHOOK-MONGO")
    print("="*80)
    print(f"üåê URL: {args.url}")
    print(f"üë§ Account ID: {args.account_id}")
    print(f"üîë API Key: {'*'*(len(args.api_key)-4) + args.api_key[-4:]}")
    print(f"üîí Security Token: {'*'*(len(args.security_token)-4) + args.security_token[-4:]}")
    print("="*80)
    
    # Testar endpoint de sa√∫de
    health_ok = test_health(args.url, args.verbose)
    
    if not health_ok:
        print("\n‚ö†Ô∏è O endpoint de sa√∫de n√£o est√° funcionando. Continuando com os testes...")
    
    # Testar webhook
    webhook_ok = test_webhook(args.url, args.account_id, args.api_key, args.security_token, args.verbose)
    
    if not webhook_ok:
        print("\n‚ö†Ô∏è O teste do webhook falhou. Verifique as configura√ß√µes e tente novamente.")
    
    # Testar conex√£o a partir do cont√™iner do Odoo
    odoo_ok = test_connection_from_odoo(args.url, args.account_id, args.api_key, args.security_token, args.verbose)
    
    # Resumo dos testes
    print("\n"+"="*80)
    print("üìã RESUMO DOS TESTES")
    print("="*80)
    print(f"‚úÖ Endpoint de sa√∫de: {'OK' if health_ok else 'FALHOU'}")
    print(f"‚úÖ Teste do webhook: {'OK' if webhook_ok else 'FALHOU'}")
    print(f"‚úÖ Conex√£o a partir do Odoo: {'OK' if odoo_ok else 'FALHOU'}")
    print("="*80)
    
    if health_ok and webhook_ok and odoo_ok:
        print("\nüéâ Todos os testes passaram! A conex√£o est√° funcionando corretamente.")
        return 0
    else:
        print("\n‚ö†Ô∏è Alguns testes falharam. Verifique as mensagens acima para mais detalhes.")
        return 1

if __name__ == "__main__":
    sys.exit(main())
