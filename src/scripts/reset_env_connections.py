#!/usr/bin/env python3
"""
Script para atualizar e verificar as conex√µes com os servi√ßos,
garantindo que as vari√°veis de ambiente corretas sejam usadas.
"""

import os
import sys
import redis
import requests
import json
import time
from pathlib import Path
from dotenv import load_dotenv

# Adicionar diret√≥rio pai ao path para importar os m√≥dulos
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# For√ßar o recarregamento das vari√°veis de ambiente
print("Recarregando vari√°veis de ambiente...")
dotenv_path = Path(__file__).resolve().parents[2] / '.env'
load_dotenv(dotenv_path, override=True)
print(f"Vari√°veis de ambiente recarregadas de: {dotenv_path}")

# Importar o servi√ßo de dados ap√≥s recarregar as vari√°veis de ambiente
from services.data.data_service_hub import DataServiceHub

class ConnectionReset:
    """Classe para redefinir e verificar conex√µes com servi√ßos."""
    
    def __init__(self):
        """Inicializa o reset de conex√µes."""
        print("Inicializando reset de conex√µes...")
        self.hub = None
        
        # Verificar e corrigir as vari√°veis de ambiente
        self.verify_and_fix_env_vars()
        
        # Recarregar as vari√°veis de ambiente para garantir que as altera√ß√µes sejam aplicadas
        print("Recarregando vari√°veis de ambiente ap√≥s corre√ß√µes...")
        load_dotenv(dotenv_path, override=True)
        
        # Inicializar o hub depois de corrigir as vari√°veis de ambiente
        self.hub = DataServiceHub()
    
    def verify_and_fix_env_vars(self):
        """Verifica e corrige as vari√°veis de ambiente."""
        print("\n===== Verificando vari√°veis de ambiente =====\n")
        
        # Verificar vari√°veis do Redis
        redis_url = os.environ.get('REDIS_URL', '')
        redis_host = os.environ.get('REDIS_HOST', '')
        redis_port = os.environ.get('REDIS_PORT', '')
        
        print(f"Redis configura√ß√µes atuais:")
        print(f"  REDIS_URL: {redis_url}")
        print(f"  REDIS_HOST: {redis_host}")
        print(f"  REDIS_PORT: {redis_port}")
        
        # Verificar vari√°veis do Qdrant
        qdrant_url = os.environ.get('QDRANT_URL', '')
        print(f"Qdrant configura√ß√µes atuais:")
        print(f"  QDRANT_URL: {qdrant_url}")
        
        # Verificar se h√° inconsist√™ncias no Redis
        if "172.24.0.5" in redis_url and redis_host == "172.24.0.3":
            print("\n‚ö†Ô∏è Inconsist√™ncia detectada: REDIS_URL cont√©m IP 172.24.0.5 mas REDIS_HOST √© 172.24.0.3")
            print("   Corrigindo REDIS_URL para usar o mesmo IP que REDIS_HOST...")
            self.update_env_var('REDIS_URL', f"redis://{redis_host}:{redis_port}/0")
        
        # Verificar inconsist√™ncias no Qdrant
        if "qdrant" in qdrant_url:
            print("\n‚ö†Ô∏è Inconsist√™ncia detectada: QDRANT_URL usa nome de host 'qdrant' em vez de IP")
            print("   Corrigindo QDRANT_URL para usar o IP 172.24.0.4...")
            self.update_env_var('QDRANT_URL', 'http://172.24.0.4:6333')
    
    def update_env_var(self, var_name, new_value):
        """Atualiza uma vari√°vel de ambiente no arquivo .env."""
        try:
            env_file_path = dotenv_path
            
            # Ler o conte√∫do atual do arquivo .env
            with open(env_file_path, 'r') as file:
                lines = file.readlines()
            
            # Atualizar a vari√°vel
            updated = False
            for i, line in enumerate(lines):
                if line.startswith(f"{var_name}="):
                    lines[i] = f"{var_name}={new_value}\n"
                    updated = True
                    break
            
            # Se a vari√°vel n√£o existir, adicione-a
            if not updated:
                lines.append(f"{var_name}={new_value}\n")
            
            # Escrever as altera√ß√µes de volta no arquivo
            with open(env_file_path, 'w') as file:
                file.writelines(lines)
            
            # Atualizar tamb√©m a vari√°vel de ambiente no processo atual
            os.environ[var_name] = new_value
            
            print(f"‚úÖ Vari√°vel {var_name} atualizada para {new_value}")
            return True
        except Exception as e:
            print(f"‚ùå Erro ao atualizar vari√°vel {var_name}: {str(e)}")
            return False
    
    def test_redis_connection(self):
        """Testa a conex√£o com o Redis."""
        print("\n===== Testando conex√£o com Redis =====\n")
        
        redis_host = os.environ.get('REDIS_HOST', '')
        redis_port = os.environ.get('REDIS_PORT', '')
        redis_db = os.environ.get('REDIS_DB', '0')
        
        try:
            # Tentar conectar diretamente sem usar o hub
            client = redis.Redis(
                host=redis_host,
                port=int(redis_port),
                db=int(redis_db),
                socket_timeout=5,
                decode_responses=True
            )
            
            client.ping()
            client.set('test_reset_key', 'Conex√£o restabelecida com sucesso!')
            value = client.get('test_reset_key')
            
            print(f"‚úÖ Conex√£o direta com Redis bem-sucedida: {redis_host}:{redis_port}")
            print(f"   Teste SET/GET: {value}")
            
            # Verificar se o hub tem uma conex√£o Redis v√°lida
            if self.hub and hasattr(self.hub, 'redis_client') and self.hub.redis_client:
                try:
                    self.hub.redis_client.ping()
                    self.hub.redis_client.set('test_hub_key', 'Conex√£o via Hub restabelecida!')
                    hub_value = self.hub.redis_client.get('test_hub_key')
                    print(f"‚úÖ Conex√£o Redis via Hub bem-sucedida")
                    print(f"   Teste SET/GET via Hub: {hub_value}")
                except Exception as e:
                    print(f"‚ùå Erro na conex√£o Redis via Hub: {str(e)}")
                    print("   Reinicializando conex√£o Redis no Hub...")
                    self.hub._redis_client = client
                    print("   Conex√£o Redis no Hub redefinida.")
            else:
                print("‚ùå O Hub n√£o tem uma conex√£o Redis inicializada")
                if self.hub:
                    print("   Definindo conex√£o Redis no Hub...")
                    self.hub._redis_client = client
                    print("   Conex√£o Redis adicionada ao Hub.")
            
            return True
        except Exception as e:
            print(f"‚ùå Erro na conex√£o direta com Redis: {str(e)}")
            return False
    
    def test_qdrant_connection(self):
        """Testa a conex√£o com o Qdrant."""
        print("\n===== Testando conex√£o com Qdrant =====\n")
        
        qdrant_url = os.environ.get('QDRANT_URL', '')
        
        try:
            # Verificar se a URL √© v√°lida
            if not qdrant_url or "qdrant" in qdrant_url:
                print(f"‚ö†Ô∏è URL do Qdrant inv√°lida: {qdrant_url}")
                qdrant_url = 'http://172.24.0.4:6333'
                print(f"   Usando URL alternativa: {qdrant_url}")
                self.update_env_var('QDRANT_URL', qdrant_url)
            
            # Testar a conex√£o
            response = requests.get(f"{qdrant_url}/collections", timeout=5)
            
            if response.status_code == 200:
                print(f"‚úÖ Conex√£o com Qdrant bem-sucedida: {qdrant_url}")
                collections = response.json()
                
                if 'result' in collections and 'collections' in collections['result']:
                    collections_list = collections['result']['collections']
                    if collections_list:
                        print(f"   Cole√ß√µes encontradas: {len(collections_list)}")
                    else:
                        print("   Nenhuma cole√ß√£o encontrada.")
                
                return True
            else:
                print(f"‚ùå Erro na conex√£o com Qdrant: Status {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erro na conex√£o com Qdrant: {str(e)}")
            return False
    
    def reset_connections(self):
        """Reinicializa todas as conex√µes do sistema."""
        print("\n===== Resetando conex√µes do sistema =====\n")
        
        redis_success = self.test_redis_connection()
        qdrant_success = self.test_qdrant_connection()
        
        # For√ßa a reinicializa√ß√£o do hub se necess√°rio
        if not redis_success or not qdrant_success:
            print("\nReinicializando o DataServiceHub para aplicar as altera√ß√µes...")
            self.hub = None
            time.sleep(1)  # Pequena pausa para limpar conex√µes
            self.hub = DataServiceHub()
            
            # Testar novamente ap√≥s a reinicializa√ß√£o
            print("\n===== Verificando conex√µes ap√≥s reinicializa√ß√£o =====")
            redis_success = self.test_redis_connection()
            qdrant_success = self.test_qdrant_connection()
        
        print("\n===== Resumo das conex√µes =====")
        print(f"Redis: {'‚úÖ Conectado' if redis_success else '‚ùå Falha'}")
        print(f"Qdrant: {'‚úÖ Conectado' if qdrant_success else '‚ùå Falha'}")
        
        if redis_success and qdrant_success:
            print("\n‚úÖ Todas as conex√µes foram reconfiguradas com sucesso!")
            return True
        else:
            print("\n‚ö†Ô∏è Alguns servi√ßos ainda apresentam falhas de conex√£o.")
            return False

def main():
    """Fun√ß√£o principal."""
    print("\n" + "=" * 80)
    print("REINICIALIZA√á√ÉO DE CONEX√ïES DO SISTEMA")
    print("=" * 80)
    
    reset = ConnectionReset()
    success = reset.reset_connections()
    
    if success:
        print("\nSistema pronto para uso! üëç")
        sys.exit(0)
    else:
        print("\nAlgumas conex√µes ainda precisam ser corrigidas. Verifique as configura√ß√µes manualmente. üîß")
        sys.exit(1)

if __name__ == "__main__":
    main()
